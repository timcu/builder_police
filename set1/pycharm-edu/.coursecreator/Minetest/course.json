{
  "lessons": [
    {
      "id": 0,
      "title": "lesson1",
      "task_list": [
        {
          "name": "Placing a block",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from ircbuilder import MinetestConnection\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nmc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)\n\nx \u003d number\ny \u003d number\nz \u003d number\n\nmc.set_node(x, y, z, node type)\n",
              "placeholders": [
                {
                  "offset": 202,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Value of x from sign in minetest"
                      ],
                      "possible_answer": "100",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 213,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Value of y from your sign in minetest"
                      ],
                      "possible_answer": "14",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 224,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Value of z from your sign in minetest"
                      ],
                      "possible_answer": "20",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 253,
                  "length": 9,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Enter the name of the node type you want to create",
                        "Remember strings need to be surrounded by quotes so they are not confused with variable names"
                      ],
                      "possible_answer": "\"wool:orange\"",
                      "placeholder_text": "node type",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom ircbuilder import MinetestConnection, NICK_MAX_LEN\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\nimport pref\n\ndef test_nodes():\n    placeholders \u003d get_answer_placeholders()\n    pybotnick \u003d \"pt\" + mtuser\n    if len(pybotnick) \u003e NICK_MAX_LEN:\n        pybotnick \u003d pybotnick[0:NICK_MAX_LEN]\n    print(\"about to connect as \",pybotnick, mtuser)\n    mc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick\u003dpybotnick)\n    str_z \u003d placeholders[2]\n    str_z_correct \u003d mc.send_cmd(\"get_player_z \" + mtuser)\n    if str_z_correct !\u003d str_z:\n        failed(\"You are using incorrect z value\u003d\" + str_z + \". Should be \" + str_z_correct)\n        return False\n    str_node\u003dmc.get_node(pref.x,pref.y,int(str_z))\n    #print(str_node)\n    if len(str_node) \u003c 5 or str_node[0:5] !\u003d \"wool:\":\n        failed(\"Centre node type does not start with \u0027wool:\u0027. Is currently \u0027\" + str_node + \"\u0027\")\n        return False\n    passed()\n    return True\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    str_x \u003d placeholders[0]\n    str_y \u003d placeholders[1]\n    if str_x !\u003d str(pref.x):\n        failed(\"You are using incorrect x value\u003d\" + str_x + \". Should be \" + str(pref.x))\n        print(\"This line is after failed\")\n        return False\n    if str_y !\u003d str(pref.y):\n        failed(\"You are using incorrect y value\u003d\" + str_y + \". Should be \" + str(pref.y))\n        print(\"This line is after failed\")\n        return False\n    print(\"This line is before passed\")\n    passed()\n    print(\"This line is after passed\")\n    return True\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    if test_answer_placeholders():\n        test_nodes()\n\n\n"
          },
          "task_texts": {
            "task": "\u003chtml\u003e\n\u003ch1\u003eTask 1 - Placing a block\u003c/h1\u003e\n\u003col\u003e\n\u003cli\u003eUse Minetest to join the Minetest server with a name and password of your choosing. Don\u0027t use a password you use for anything else because other people will see your password\u003c/li\u003e\n\u003cli\u003eAsk the Minetest op to grant you privilege \"irc_builder\"\u003c/li\u003e\n\u003cli\u003eNavigate to your sign to find your first task. It will be at x\u003d100, z\u003d10 or higher. Press F5 to see your current location\u003c/li\u003e \n\u003cli\u003eIn PyCharm Edu \u0026gt; File menu \u0026gt; Open... \u0026gt; coderdojo.py\u003c/li\u003e\n\u003cli\u003eEnter your name as mtuser (mtuser\u003d\"myname\")\u003c/li\u003e\n\u003cli\u003eEnter your password as mtuserpass (mtuserpass\u003d\"mysecret\")\u003c/li\u003e\n\u003cli\u003eAsk the Minetest op for details of the IRC server and fill in details in coderdojo.py\u003c/li\u003e\n\u003cli\u003eSave coderdojo.py file and close it\u003c/li\u003e\n\u003c/ol\u003e \n\u003cp\u003eThis first task teaches you how to place a block using the set_node function. \nThe following line places a stone block at x\u003d100, y\u003d14, z\u003d0.\u003c/p\u003e\n\u003ccode\u003emc.set_node(100, 14, 0, \"default:stone\")\u003c/code\u003e\n\u003cp\u003eThe \u003ccode\u003eset_node\u003c/code\u003e function has 4 parameters. \nThey are x, y, z, and node_type. The first 3 parameters are the coordinates where the node will be placed.\nThe last parameter is the name of the material to place. Examples are \"default:wood\", \"default:dirt\", \"wool:blue\", \"default:glass\", \"carts:rail\".\nThe material names are the name of the mod they come from, a colon (:), and then the material name within that mod.\u003c/p\u003e\n\u003cp\u003eClick the green triangle \"play\" button to run your program\u003c/p\u003e\n\u003cp\u003eClick the \"Check task\" button (first button in toolbar above) to \ncheck you have completed the task correctly and move on to next task.\u003c/p\u003e\n\u003c/html\u003e"
          },
          "task_type": "edu"
        },
        {
          "name": "Placing several blocks",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from ircbuilder import MinetestConnection\nfrom coderdojo import ircserver, mtuser,mtuserpass, mtbotnick, channel\nmc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)\n\nx \u003d 100\ny \u003d 14\nz \u003d number\n\nmc.set_node(x, y-1, z-1, \"default:glass\")\nmc.set_node(x, formula, z  , \"default:glass\")\nmc.set_node(x, y-1, formula, \"default:glass\")\nmc.set_node(x, y  , z-1, \"default:glass\")\nmc.set_node(x, y  , z+1, \"default:glass\")\nmc.set_node(x, y+1, z-1, \"default:glass\")\nmc.set_node(x, formula, z  , \"default:glass\")\nmc.set_node(x, y+1, z+1, \"default:glass\")\nmc.set_node(variable, variable, z, \"wool:orange\")\n\n",
              "placeholders": [
                {
                  "offset": 215,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "20",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 280,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "For bottom row"
                      ],
                      "possible_answer": "y-1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 331,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "To the right of wool node"
                      ],
                      "possible_answer": "z+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 498,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "y+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 583,
                  "length": 8,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "x",
                      "placeholder_text": "variable",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 593,
                  "length": 8,
                  "subtask_infos": {
                    "0": {
                      "hints": [],
                      "possible_answer": "y",
                      "placeholder_text": "variable",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom ircbuilder import MinetestConnection, NICK_MAX_LEN\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\nimport pref\n\n\ndef test_nodes():\n    placeholders \u003d get_answer_placeholders()\n    pybotnick \u003d \"pt\" + mtuser\n    if len(pybotnick) \u003e NICK_MAX_LEN:\n        pybotnick \u003d pybotnick[0:NICK_MAX_LEN]\n    print(\"about to connect as \",pybotnick, mtuser)\n    mc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick\u003dpybotnick)\n    str_z \u003d placeholders[0]\n    str_z_correct \u003d mc.send_cmd(\"get_player_z \" + mtuser)\n    if str_z_correct !\u003d str_z:\n        failed(\"You are using incorrect z value\u003d\" + str_z + \". Should be \" + str_z_correct)\n        return False\n    for y in range(pref.y-1, pref.y+2):\n        for z in range(pref.z-1, pref.z+2):\n            node\u003dmc.get_node(pref.x,y,z)\n            if y \u003d\u003d pref.y and z \u003d\u003d pref.z:\n                if node[0:5] !\u003d \"wool:\":\n                    failed(\"center node type does not start with \u0027wool:\u0027. It is \u0027\" + node + \"\u0027\")\n                    return False\n            else:\n                if node !\u003d \"default:glass\":\n                    failed(\"Node at x\u003d\"+str(pref.x)+\", y\u003d\"+str(y)+\", z\u003d\"+str(z)+\" should be \u0027default:glass\u0027 but is \u0027\" + node + \"\u0027\" )\n                    return False\n    passed()\n    return True\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    formula \u003d placeholders[1]\n    if placeholders[1] !\u003d \u0027y-1\u0027:\n        failed(\"Second answer should be \u0027y-1\u0027 not \u0027\" + placeholders[1] + \"\u0027\")\n        return False\n    passed()\n    return True\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    #test_answer_placeholders():\n    test_nodes()\n\n\n"
          },
          "task_texts": {
            "task": "\u003chtml\u003e\n\u003ch1\u003eTask 2 - Placing several blocks\u003c/h1\u003e\n\u003cp\u003eThe second task is to place a glass frame around the wool block drawn in the first task.\nThe program on the left achieves this by storing the centre point coordinates\nin the variables x, y, and z, and then setting each of the parameters of set_node\nas a formula based on the reference point. The advantage of doing it this\nway is that the coordinates of the reference point can be changed and the \nstructure will be built exactly the same but in a different position.\u003c/p\u003e\n\u003cp\u003eSee if you can put in the correct missing formula to build a frame of glass \nall the way around the orange wool block\u003c/p\u003e  \n\u003c/html\u003e"
          },
          "task_type": "edu"
        },
        {
          "name": "Placing a cuboid of blocks",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from ircbuilder import MinetestConnection\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nmc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)\n\nx \u003d 100\ny \u003d 14\nz \u003d number\n\n# Create a 3x3x3 solid cube of glass\nmc.set_nodes(x-1, y-1, z-1, formula, formula, formula, \"default:material\")\n# Replace centre position with orange wool (or any colour you choose)\nmc.set_node(variables, \"material\")\n\n",
              "placeholders": [
                {
                  "offset": 217,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Find correct z value for centre of cube from sign in minetest"
                      ],
                      "possible_answer": "20",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 290,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "x value for opposite point of cube"
                      ],
                      "possible_answer": "x+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 299,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "y value for opposite corner of cube"
                      ],
                      "possible_answer": "y+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 308,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "z value for opposite corner of cube"
                      ],
                      "possible_answer": "z+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 326,
                  "length": 8,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Complete the name of the material which will surround the wool block"
                      ],
                      "possible_answer": "glass",
                      "placeholder_text": "material",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 419,
                  "length": 9,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Enter first three arguments to set_node function separated by columns"
                      ],
                      "possible_answer": "x, y, z",
                      "placeholder_text": "variables",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 431,
                  "length": 8,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Enter the name of the material in the format \"modname:variation\""
                      ],
                      "possible_answer": "wool:orange",
                      "placeholder_text": "material",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom ircbuilder import MinetestConnection, NICK_MAX_LEN\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\nimport pref\n\n\ndef test_nodes():\n    placeholders \u003d get_answer_placeholders()\n    pybotnick \u003d \"pt\" + mtuser\n    if len(pybotnick) \u003e NICK_MAX_LEN:\n        pybotnick \u003d pybotnick[0:NICK_MAX_LEN]\n    print(\"about to connect as \",pybotnick, mtuser)\n    mc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick\u003dpybotnick)\n    str_z \u003d placeholders[0]\n    str_z_correct \u003d mc.send_cmd(\"get_player_z \" + mtuser)\n    if str_z_correct !\u003d str_z:\n        failed(\"You are using incorrect z value\u003d\" + str_z + \". Should be \" + str_z_correct)\n        return False\n    for x in range(pref.x-1, pref.x+2):\n        for y in range(pref.y-1, pref.y+2):\n            for z in range(pref.z-1, pref.z+2):\n                node\u003dmc.get_node(x,y,z)\n                if y \u003d\u003d pref.y and z \u003d\u003d pref.z:\n                    if node[0:5] !\u003d \"wool:\":\n                        failed(\"center node type does not start with \u0027wool:\u0027. It is \u0027\" + node + \"\u0027\")\n                        return False\n                else:\n                    if node !\u003d \"default:glass\":\n                        failed(\"Node at x\u003d\"+str(x)+\", y\u003d\"+str(y)+\", z\u003d\"+str(z)+\" should be \u0027default:glass\u0027 but is \u0027\" + node + \"\u0027\" )\n                        return False\n    passed()\n    return True\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    #test_answer_placeholders():\n    test_nodes()\n"
          },
          "task_texts": {
            "task": "\u003chtml\u003e\n\u003ch1\u003eTask 3 - Cuboid\u003c/h1\u003e\n\u003cp\u003e\nThis lesson introduces the set_nodes function which fills all positions in \na cuboid with the same node type. The following command creates a cuboid of stone\nwith diagonal corners at (x1, y1, z1) and (x2, y2, z2)\n\u003c/p\u003e\n\u003ccode\u003emc.set_nodes(x1, y1, z1, x2, y2, z2, \"default:stone\")\u003c/code\u003e\n\u003cp\u003e\nPlace a glass box around block at coordinates on sign in minetest. \nBox is to be made of \"default:glass\". \nCentre block is to be from the wool mod and can be orange or some other colour.\n\u003c/p\u003e\n\u003c/html\u003e"
          },
          "task_type": "edu"
        },
        {
          "name": "Tunnel",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from ircbuilder import MinetestConnection\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nmc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)\n\nx1 \u003d number\nx2 \u003d number\ny \u003d number\nz \u003d number\n\n# build a solid cuboid of glass first which is 7 blocks high and 5 blocks wide\nmc.set_nodes(x1, formula, formula, x2, formula, formula, \"default:glass\")\n# replace the internal glass with air so left with a hollow tunnel\nmc.set_nodes(x1, formula, formula, x2, formula, formula, \"air\")\n",
              "placeholders": [
                {
                  "offset": 203,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Enter the x value for one end of the tunnel"
                      ],
                      "possible_answer": "93",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 215,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Enter the x value for the far end of the tunnel"
                      ],
                      "possible_answer": "70",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 226,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Enter the y value for the floor of the tunnel"
                      ],
                      "possible_answer": "14",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 237,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Enter your build position z value marking the centre of the tunnel"
                      ],
                      "possible_answer": "20",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 341,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula needs to return the y value of the floor of the tunnel"
                      ],
                      "possible_answer": "y  ",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 350,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula needs to return the z value of the left wall of the tunnel",
                        "Tunnel is 5 blocks wide so left wall will be 2 blocks to the left of centre block"
                      ],
                      "possible_answer": "z-2",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 363,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula needs to return the y value of the roof of the tunnel",
                        "Tunnel is 7 blocks high so roof will be 6 blocks above floor"
                      ],
                      "possible_answer": "y+6",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 372,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula needs to return the z value of the right wall of the tunnel.",
                        "Tunnel is 5 blocks wide so right wall will be 2 blocks to the right of centre block."
                      ],
                      "possible_answer": "z+2",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 482,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula needs to return the y value one block higher than the floor of the tunnel"
                      ],
                      "possible_answer": "y+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 491,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula needs to return the z value one block in from the left wall of the tunnel"
                      ],
                      "possible_answer": "z-1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 504,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula needs to return the y value one block lower than the roof of the tunnel"
                      ],
                      "possible_answer": "y+5",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 513,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula needs to return the z value one block in from the right wall of the tunnel."
                      ],
                      "possible_answer": "z+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom ircbuilder import MinetestConnection, NICK_MAX_LEN\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nx1 \u003d 93\nx2 \u003d 70\ny \u003d 14\n\n\ndef test_nodes():\n    placeholders \u003d get_answer_placeholders()\n    print(\"Len of placehoders\", len(placeholders))\n    for i in range(len(placeholders)):\n        print(i, placeholders[i])\n    pybotnick \u003d \"pt\" + mtuser\n    if len(pybotnick) \u003e NICK_MAX_LEN:\n        pybotnick \u003d pybotnick[0:NICK_MAX_LEN]\n    print(\"about to connect as \",pybotnick, mtuser)\n    mc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick\u003dpybotnick)\n    if placeholders[0] !\u003d str(x1):\n        failed(\"You are using incorrect x1 value\u003d\" + placeholders[0] + \". Should be \" + str(x1))\n        return False\n    if placeholders[1] !\u003d str(x2):\n        failed(\"You are using incorrect x2 value\u003d\" + placeholders[1] + \". Should be \" + str(x2))\n        return False\n    if placeholders[2] !\u003d str(y):\n        failed(\"You are using incorrect y value\u003d\" + placeholders[2] + \". Should be \" + str(y))\n        return False\n    str_z \u003d placeholders[3]\n    str_z_correct \u003d mc.send_cmd(\"get_player_z \" + mtuser)\n    if str_z_correct !\u003d str_z:\n        failed(\"You are using incorrect z value\u003d\" + str_z + \". Should be \" + str_z_correct)\n        return False\n    z \u003d int(str_z)\n    # roof\n    str_count \u003d mc.compare_nodes(x1, y+6, z-2, x2, y+6, z+2, \"default:glass\")\n    if str_count !\u003d \u00270\u0027:\n        failed(\"Tunnel roof at y\u003d\" + str(y+6) + \" should be all glass but there are \" + str_count + \" blocks which are not\")\n        return False\n    # left wall\n    str_count \u003d mc.compare_nodes(x1, y  , z-2, x2, y+6, z-2, \"default:glass\")\n    if str_count !\u003d \u00270\u0027:\n        failed(\"Tunnel wall at z\u003d\" + str(z-2) + \" should be all glass but there are \" + str_count + \" blocks which are not\")\n        return False\n    # right wall\n    str_count \u003d mc.compare_nodes(x1, y  , z+2, x2, y+6, z+2, \"default:glass\")\n    if str_count !\u003d \u00270\u0027:\n        failed(\"Tunnel wall at z\u003d\" + str(z+2) + \" should be all glass but there are \" + str_count + \" blocks which are not\")\n        return False\n    # floor\n    str_count \u003d mc.compare_nodes(x1, y  , z-2, x2, y  , z+2, \"default:glass\")\n    if str_count !\u003d \u00270\u0027:\n        failed(\"Tunnel floor at z\u003d\" + str(z+2) + \" should be all glass but there are \" + str_count + \" blocks which are not\")\n        return False\n    # Air\n    str_count \u003d mc.compare_nodes(x1, y+1, z-1, x2, y+5, z+1, \"air\")\n    if str_count !\u003d \u00270\u0027:\n        failed(\"Tunnel centre should be all air but there are \" + str_count + \" blocks which are not\")\n        return False\n    passed()\n    return True\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    #test_answer_placeholders()       # TODO: uncomment test call\n    test_nodes()\n\n\n"
          },
          "task_texts": {
            "task": "\u003chtml\u003e\n\u003ch1\u003eTask 4 - Tunnel\u003c/h1\u003e\n\u003cp\u003eUsing the set_nodes function, build a hollow tunnel of glass.\nYou will need to create a solid cuboid of glass first and then create \na cuboid of air inside it so that you are left with a hollow tunnel.\u003c/p\u003e"
          },
          "task_type": "edu"
        },
        {
          "name": "Tunnel floor",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from ircbuilder import MinetestConnection\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nmc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)\n\nx1 \u003d 93\nx2 \u003d 70\ny \u003d 14\nz \u003d number\n\n# build a solid cuboid of glass first which is 7 blocks high and 5 blocks wide\nmc.set_nodes(x1, y  , z-2, x2, y+6, z+2, \"default:glass\")\n# replace the internal glass with air so left with a hollow tunnel\nmc.set_nodes(x1, y+1, z-1, x2, y+5, z+1, \"air\")\n# replace the floor with stone\n# type here the command to set all floor nodes to stone\n# place a torch every four blocks along right hand side of tunnel\nfor x in range(start,stop,step):\n    mc.set_node(x, formula, z+1, \"default:torch\")\n\n\n",
              "placeholders": [
                {
                  "offset": 225,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "The z value of the centre of the tunnel"
                      ],
                      "possible_answer": "20",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 516,
                  "length": 55,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Node type is \"default:stone\"",
                        "Use the set_nodes function from the MinetestConnection class",
                        "Parameters for set_nodes are\nmc.set_nodes(x1, y1, z1, x2, y2, z2, item)",
                        "y1 and y2 parameters are y",
                        "You can enter formulae for z1 and z2 parameters",
                        "The z value needs to go from z-1 to z+1"
                      ],
                      "possible_answer": "mc.set_nodes(x1, y  , z-1, x2, y, z+1, \"default:stone\")",
                      "placeholder_text": "# type here the command to set all floor nodes to stone",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 653,
                  "length": 5,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Value of x at one end of the tunnel"
                      ],
                      "possible_answer": "x1",
                      "placeholder_text": "start",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 659,
                  "length": 4,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Value of x at the other end of the tunnel"
                      ],
                      "possible_answer": "x2",
                      "placeholder_text": "stop",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 664,
                  "length": 4,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "How much you want to increase x by for each iteration of the loop. Enter 2 if you want to count up in 2s, eg 2, 4, 6, 8",
                        "Has to be a negative number if you are counting backwards"
                      ],
                      "possible_answer": "-4",
                      "placeholder_text": "step",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 690,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Torch needs to be placed at coordinates one block above the floor"
                      ],
                      "possible_answer": "y+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom ircbuilder import MinetestConnection, NICK_MAX_LEN\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nx1 \u003d 93\nx2 \u003d 70\ny \u003d 14\n\n\ndef test_nodes():\n    placeholders \u003d get_answer_placeholders()\n    pybotnick \u003d \"pt\" + mtuser\n    if len(pybotnick) \u003e NICK_MAX_LEN:\n        pybotnick \u003d pybotnick[0:NICK_MAX_LEN]\n    print(\"about to connect as \",pybotnick, mtuser)\n    mc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick\u003dpybotnick)\n    str_z \u003d placeholders[0]\n    str_z_correct \u003d mc.send_cmd(\"get_player_z \" + mtuser)\n    if str_z_correct !\u003d str_z:\n        failed(\"You are using incorrect z value\u003d\" + str_z + \". Should be \" + str_z_correct)\n        return False\n    z \u003d int(str_z)\n    # floor\n    str_count \u003d mc.compare_nodes(x1, y  , z-1, x2, y  , z+1, \"default:stone\")\n    if str_count !\u003d \u00270\u0027:\n        failed(\"Tunnel floor at z\u003d\" + str(z+2) + \" should be all stone but there are \" + str_count + \" blocks which are not\")\n        return False\n    # torches\n    str_count \u003d mc.compare_nodes(x1, y+1, z-1, x2, y+1, z+1, \"air\")\n    count_not_air \u003d int(str_count)\n    str_count \u003d mc.compare_nodes(x1, y+1, z-1, x2, y+1, z+1, \"default:torch\")\n    count_not_torch \u003d int(str_count)\n    count_other \u003d (x1-x2+1)*3 - count_not_torch - count_not_air\n    if count_other \u003e 0:\n        failed(\"Above floor should only be air or torches but \" + str(count_other) + \" nodes are something else\")\n        return False\n    min_torch \u003d (x1-x2)//4\n    if count_not_air \u003c min_torch:\n        failed(\"There should be at least \" + str(min_torch) + \" torches but there are only \" + str(count_not_air))\n        return False\n    if count_not_air \u003e min_torch+1:\n        failed(\"There should be at most \" + str(min_torch+1) + \" torches but there are \" + str(count_not_air))\n        return False\n    passed()\n    return True\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n    test_nodes()\n\n\n"
          },
          "task_texts": {
            "task": "\u003chtml\u003e\n\u003ch1\u003eTask 5 - Tunnel floor\u003c/h1\u003e\n\u003cp\u003eChange the floor of the tunnel to stone and place a \ntorch every 4 blocks.\u003c/p\u003e\n"
          },
          "task_type": "edu"
        },
        {
          "name": "Chequered square",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from ircbuilder import MinetestConnection\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nmc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)\n\n# position of centre of square\ncx \u003d 100\ncy \u003d 32\nz \u003d int(mc.send_cmd(\u0027get_player_z \u0027 + mtuser))\n\n# array of node types which we will alternate through\ncolours \u003d [\"wool:colour\", \"wool:colour\"]\n\n# calculate extents of square\nwidth \u003d number\nheight \u003d number\nx1 \u003d formula\ny1 \u003d formula\nx2 \u003d x1 + width\ny2 \u003d y1 + height\n\n# loop through all positions in square\nfor y in range(parameters):\n    for x in range(parameters):\n        command\n\n",
              "placeholders": [
                {
                  "offset": 365,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Choose one of the 16 wool colours",
                        "Examples are white, black, red, orange, yellow, blue"
                      ],
                      "possible_answer": "white",
                      "placeholder_text": "colour",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 380,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Choose another colour",
                        "Has to be different to the first colour"
                      ],
                      "possible_answer": "orange",
                      "placeholder_text": "colour",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 428,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "width of square you are building"
                      ],
                      "possible_answer": "9",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 444,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "height of square you are building"
                      ],
                      "possible_answer": "9",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 456,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "A formula based on cx and width which results in the minimum x value for blocks of the square",
                        "result of formula should be an int",
                        "Pseudo code\n\nx1 \u003d centre x position - half the width",
                        "Use integer division when finding half the height ( width // 2 ) so that result will be an int"
                      ],
                      "possible_answer": "cx - width // 2",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 469,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula based on centre y position and height",
                        "Similar to formula for x1"
                      ],
                      "possible_answer": "cy - height // 2",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 565,
                  "length": 10,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Parameters of range function so the y iterates through all the y positions of the square",
                        "range(stop): iterates from 0 to (\u0027stop\u0027-1) counting up in ones\nrange(start, stop): iterates from \u0027start\u0027 to (\u0027stop\u0027-1) counting up in ones\nrange(start, stop, step): iterates from \u0027start\u0027 to but not including \u0027stop\u0027 counting in \u0027step\u0027s."
                      ],
                      "possible_answer": "y1, y2",
                      "placeholder_text": "parameters",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 597,
                  "length": 10,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Parameters for range to iterate through all x values of square"
                      ],
                      "possible_answer": "x1, x2",
                      "placeholder_text": "parameters",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 618,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Command or commands to set nodes alternating wool colours",
                        "Adjacent blocks with the same value of y must have different colours",
                        "colours[0] will use one colour\ncolours[1] will use the other colour",
                        "Use mc.set_node(x, y, z, node) command",
                        "Choose different colours using if statements and/or modulo arithmetic",
                        "The modulo operator is %. It gives the remainder after dividing. \n\n5 % 2 \u003d 1\n6 % 2 \u003d 0\n7 % 2 \u003d 1"
                      ],
                      "possible_answer": "mc.set_node(x, y, z, colours[(y+x)%2])",
                      "placeholder_text": "command",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom ircbuilder import MinetestConnection, NICK_MAX_LEN\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nx \u003d 100\ny \u003d 32\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    wool0 \u003d \"wool:\" + placeholders[0]\n    wool1 \u003d \"wool:\" + placeholders[1]\n    pybotnick \u003d \"pt\" + mtuser\n    if len(pybotnick) \u003e NICK_MAX_LEN:\n        pybotnick \u003d pybotnick[0:NICK_MAX_LEN]\n    mc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick\u003dpybotnick)\n    z \u003d int(mc.send_cmd(\"get_player_z \" + mtuser))\n    # Check that builder_police happy that task completed\n    # floor\n    count_0 \u003d 81 - int(mc.compare_nodes(x-4, y-4, z, x+4, y+4, z, wool0))\n    count_1 \u003d 81 - int(mc.compare_nodes(x-4, y-4, z, x+4, y+4, z, wool1))\n    if count_0 \u003e 45:\n        failed(\"Too many \" + wool0 + \". Should be less than 46 but are \" + count_0)\n    elif count_1 \u003e 45:\n        failed(\"Too many \" + wool1 + \". Should be less than 46 but are \" + count_1)\n    elif count_0 \u003c 36:\n        failed(\"Too few \" + wool0 + \". Should be at least 36 but are \" + count_0)\n    elif count_1 \u003c 36:\n        failed(\"Too few \" + wool1 + \". Should be at least 36 but are \" + count_1)\n    else:\n        task \u003d int(mc.send_cmd(\"get_player_task \" + mtuser))\n        if task \u003e 6:\n            passed()\n        else:\n            failed(\"Failed: Check \u0027Task 6 Assessment\u0027 sign in minetest to find out what else is required\")\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    run_common_tests()\n    test_answer_placeholders()       # TODO: uncomment test call\n\n\n"
          },
          "task_texts": {
            "task": "\u003chtml\u003e\n\u003ch1\u003eTask 6 - Chequered square\u003c/h1\u003e\n\u003cp\u003eConstruct a vertical square shape of alternating wool colours in the sky with height of 9 blocks\u003c/p\u003e\n\u003cp\u003eBecause the colours are alternating you can\u0027t use the set_nodes command. \nInstead you need to set each node individually which will take longer to run.\u003c/p\u003e\n\u003cp\u003eThe first challenge will be to work out where to start building the square. Try drawing the square \nas a grid on a piece of paper and labelling the x and y coordinates of each grid location. That will \ntell you what x1 and y1 should be. If you can turn it into a formula based on centre position then you \ncan easily build new squares just by providing a new cx, cy and width/height.\u003c/p\u003e\n\u003cp\u003eThe second challenge is how to specify a different wool colour each \ntime a node is set. There are several ways to do this and each one is correct.\nOne solution can be achieved in one command. Use the hints to see if you can work it out.\u003c/p\u003e\n\u003cp\u003eAnother solution is to draw the whole square in one colour\nfirst and then step in twos to replace individual blocks with the \nother colour.\u003c/o\u003e\n\u003cp\u003eAnother solution is to keep track of the last colour used in a variable and\nthen use \u003ccode\u003eif/else\u003c/code\u003e conditional logic to ensure the other\ncolour is used next time.\u003c/p\u003e\n\u003cp\u003eOr maybe you can think of another way of doing it. The choice is yours\u003c/p\u003e\n\u003c/html\u003e"
          },
          "task_type": "edu"
        },
        {
          "name": "Chequered diamond",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from ircbuilder import MinetestConnection\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nmc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)\n\n# position of centre of diamond\ncx \u003d 100\ncy \u003d 32\nz \u003d int(mc.send_cmd(\u0027get_player_z \u0027 + mtuser))\n\n# array of node types which we will alternate through\ncolours \u003d [\"wool:white\", \"wool:orange\"]\n\n# calculate extents of diamond\nwidth \u003d number\nheight \u003d number\nx1 \u003d cx - width // 2\ny1 \u003d cy - height // 2\nx2 \u003d x1 + width\ny2 \u003d y1 + height\n\n# loop through range of y values\nfor y in range(y1,y2):\n    # calculate x range which will give diamond shape\n    xlo \u003d formula\n    xhi \u003d formula\n    # loop through range of x values\n    for x in range(xlo,xhi):\n        # set each node to an alternate wool colour\n        mc.set_node(x,y,z,colours[(x+y)%2])\n",
              "placeholders": [
                {
                  "offset": 366,
                  "length": 5,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Or choose another colour"
                      ],
                      "possible_answer": "white",
                      "placeholder_text": "white",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 380,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Or choose another colour"
                      ],
                      "possible_answer": "orange",
                      "placeholder_text": "orange",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 429,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Width of diamond in blocks"
                      ],
                      "possible_answer": "21",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 445,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Height of diamond in blocks"
                      ],
                      "possible_answer": "21",
                      "placeholder_text": "number",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 649,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Returns the starting value of x for each value of y",
                        "Formula in terms of x1, y and cy",
                        "If you can\u0027t create a single formula, try two formulae. One for y \u003c\u003d cy and one for y \u003e cy",
                        "It is possible to combine the two formulae into one using the abs() function which returns the absolute value of a number. The absolute value of negative numbers is the same number but made positive. The absolute value of positive numbers is the same number.\n\nabs(5) \u003d 5\nabs(-3) \u003d 3\n"
                      ],
                      "possible_answer": "x1 + abs(y - cy)",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 667,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "The maximum value of x in the diamond for a given y value",
                        "Formua in terms of x2, y, cy",
                        "Same as previously, you can solve this formula with several lines of code based on whether y \u003c\u003d cy or y \u003e cy"
                      ],
                      "possible_answer": "x2 - abs(y - cy)",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom ircbuilder import MinetestConnection, NICK_MAX_LEN\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\n\ndef test_minetest():\n    pybotnick \u003d \"pt\" + mtuser\n    if len(pybotnick) \u003e NICK_MAX_LEN:\n        pybotnick \u003d pybotnick[0:NICK_MAX_LEN]\n    mc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick\u003dpybotnick)\n    task \u003d int(mc.send_cmd(\"get_player_task \" + mtuser))\n    if task \u003e 7:\n        passed()\n        return True\n    else:\n        failed(\"Failed: Check \u0027Task 7 Assessment\u0027 sign in minetest to find out what else is required\")\n        return False\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    if not test_minetest():\n        run_common_tests()\n        #test_answer_placeholders()\n\n\n"
          },
          "task_texts": {
            "task": "\u003chtml\u003e\n\u003ch1\u003eTask 7 - Chequered diamond\u003c/h1\u003e\n\u003cp\u003eConstruct a vertical diamond shape of alternating wool colours in the sky with height of 21 blocks\u003c/p\u003e\n\u003cp\u003eMost of the code is similar to the chequered square. This challenge is to come up with formulae for xlo and yhi,\nthe low and high values of x where you want to place blocks. And remember, the hints can be your friend.\u003c/p\u003e\n\u003cp\u003eThe \u0027Check Task\u0027 button above relies on minetest to evaluate this task.\nYou may have to press it again when your program has finished to ensure \nminetest has had time to evaluate it.\u003c/p\u003e\n\u003c/html\u003e"
          },
          "task_type": "edu"
        },
        {
          "name": "Sloping tunnel",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from ircbuilder import MinetestConnection\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nmc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)\n\n# start point of tunnel\nx1 \u003d 69\ny1 \u003d 14\nz \u003d int(mc.send_cmd(\u0027get_player_z \u0027 + mtuser))\n\n#Make the full tunnel in solid glass and stone first\nfor i in range(61):\n    # Cross section of tunnel at position i\n    # Build 5 x 7 blocks of glass at position i for walls, roof, and centre\n    mc.set_nodes(formula,formula,z-2,formula,formula,z+2,\"default:glass\")\n    # Build 3 x 1 blocks of stone at position i for floor\n    mc.set_nodes(formula,formula,z-1,formula,formula,z+1,\"default:stone\")\n#Now hollow out the tunnel because sure that lava and water can\u0027t seep in\nfor i in range(61):\n    # Use air to hollow out the tunnel\n    mc.set_nodes(formula,formula,z-1,formula,formula,z+1,\"air\")\n    if condition:\n        # Place torches down the right hand side of the tunnel\n        mc.set_node(formula,formula,z+1,\"default:torch\")\n",
              "placeholders": [
                {
                  "offset": 496,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "in terms of x1 and i"
                      ],
                      "possible_answer": "x1-i",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 504,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "y value of floor of tunnel at position i",
                        "in terms of y1 and i"
                      ],
                      "possible_answer": "y1-i",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 516,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "in terms of x1 and i",
                        "all blocks in this cross section of the tunnel will have the same value of x"
                      ],
                      "possible_answer": "x1-i",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 524,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "y value of roof of sloping tunnel",
                        "in terms of y1 and i"
                      ],
                      "possible_answer": "y1-i+6",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 628,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "x value at cross section of tunnel in terms of x1 and i"
                      ],
                      "possible_answer": "x1-i",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 636,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "y value of floor at position i in tunnel in terms of y1 and i"
                      ],
                      "possible_answer": "y1-i",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 648,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "x value at position i in tunnel in terms of x1 and i"
                      ],
                      "possible_answer": "x1-i",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 656,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "y value of floor at position i in tunnel in terms of y1 and i"
                      ],
                      "possible_answer": "y1-i  ",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 835,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "x value at position i in tunnel in terms of x1 and i"
                      ],
                      "possible_answer": "x1-i",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 843,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "y value of one block above floor at position i in tunnel in terms of y1 and i"
                      ],
                      "possible_answer": "y1-i+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 855,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "x value of tunnel at position i in terms of x1 and i"
                      ],
                      "possible_answer": "x1-i",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 863,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "y value of block one block below roof at position i in tunnel in terms of y1 and i"
                      ],
                      "possible_answer": "y1-i+5",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 889,
                  "length": 9,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "A condition that is only True for every fourth value of i",
                        "Use modulo operator (%) on i to check for every fourth value of i",
                        "i%4 \u003d\u003d 0"
                      ],
                      "possible_answer": "i%4\u003d\u003d0",
                      "placeholder_text": "condition",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 983,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "x value of position i of tunnel in terms of x1 and i"
                      ],
                      "possible_answer": "x1-i",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 991,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "y value of one block above floor at position i of tunnel in terms of y1 and i"
                      ],
                      "possible_answer": "y1-i+1",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom ircbuilder import MinetestConnection, NICK_MAX_LEN\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\n\ndef test_minetest():\n    pybotnick \u003d \"pt\" + mtuser\n    if len(pybotnick) \u003e NICK_MAX_LEN:\n        pybotnick \u003d pybotnick[0:NICK_MAX_LEN]\n    mc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick\u003dpybotnick)\n    task \u003d int(mc.send_cmd(\"get_player_task \" + mtuser))\n    if task \u003e 8:\n        passed()\n        return True\n    else:\n        failed(\"Failed: Check \u0027Task 8 Assessment\u0027 sign in minetest to find out what else is required\")\n        return False\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    if not test_minetest():\n        run_common_tests()\n        # test_answer_placeholders()       # TODO: uncomment test call\n\n"
          },
          "task_texts": {
            "task": "\u003chtml\u003e\n\u003ch1\u003eTask 8 - Sloping tunnel\u003c/h1\u003e\n\u003cp\u003eContinue glass tunnel down on a diagonal when centre of \ntunnel floor goes from x1\u003d69, y1\u003d14 to x2\u003d9, y2\u003d46.\u003c/p\u003e\n\u003cp\u003eTo ensure no lava or water leak into tunnel, build the \nfull tunnel in glass first and then hollow it out with air.\nBy never having an open end, water and lava can\u0027t flow in.\u003c/p\u003e\n\u003cp\u003eThe \u0027Check Task\u0027 button above relies on minetest to evaluate this task.\nYou may have to press it again when your program has finished to ensure \nminetest has had time to evaluate it.\u003c/p\u003e\n\u003c/html\u003e"
          },
          "task_type": "edu"
        },
        {
          "name": "Stairs and rail",
          "stepic_id": 0,
          "position": 0,
          "task_files": {
            "task.py": {
              "name": "task.py",
              "text": "from ircbuilder import MinetestConnection\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\nmc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)\n\n# start point of tunnel\nx1 \u003d 69\ny1 \u003d 14\nz \u003d int(mc.send_cmd(\u0027get_player_z \u0027 + mtuser))\n\n# store node types in variables for easier use\nstair \u003d JSON string\nrail  \u003d string\nprail \u003d string\n\n\n#Now hollow out the tunnel because sure that lava and water can\u0027t seep in\nfor i in range(61):\n    #Add stairs - Don\u0027t need stairs on very last block. Hence check i \u003c 60\n    if i \u003c 60:\n        mc.set_node(x1-i,y1-i,z-1,stair)\n    #Add power rail\n    mc.set_node(x1-i,y1-i+1,z,prail)\nfor x in range(x1,93):\n    #Add rail or powerrail in pairs\n    if formula\u003d\u003d0:\n        mc.set_node(x,y1+1,z,rail)\n    else:\n        mc.set_node(x,y1+1,z,prail)\n",
              "placeholders": [
                {
                  "offset": 341,
                  "length": 11,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "stonebrick stairs sloping down towards negative x",
                        "Enclose JSON string in single quotes and use double quotes within the string"
                      ],
                      "possible_answer": "\u0027{\"name\":\"stairs:stair_stonebrick\",\"param2\":\"1\"}\u0027",
                      "placeholder_text": "JSON string",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 361,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "item name for rail",
                        "see task sign in minetest for item names you will need in this task"
                      ],
                      "possible_answer": "\u0027carts:rail\u0027",
                      "placeholder_text": "string",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 376,
                  "length": 6,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "item name for powered rail",
                        "see task string in minetest to see item names required in this task"
                      ],
                      "possible_answer": "\u0027carts:powerrail\u0027",
                      "placeholder_text": "string",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                },
                {
                  "offset": 733,
                  "length": 7,
                  "subtask_infos": {
                    "0": {
                      "hints": [
                        "Formula in terms of x which will alternate every two blocks\n\n0 0 1 1 0 0 1 1 0 0 1 1 ...",
                        "You know that j%2 will alternate every one block\n\n0 1 0 1 0 1 0 1 ...\n\nSo replace j with something in terms of x which counts at half speed",
                        "x//2 counts at half speed\n\n0 0 1 1 2 2 3 3 4 4 ...",
                        "x//2%2 combines the two to get the alternating pattern\n\n0 0 1 1 0 0 1 1 ...\n\nThere are other ways to do this"
                      ],
                      "possible_answer": "x//2%2",
                      "placeholder_text": "formula",
                      "has_frame": true,
                      "need_insert_text": false
                    }
                  }
                }
              ]
            }
          },
          "test_files": {
            "tests.py": "from test_helper import run_common_tests, failed, passed, get_answer_placeholders\nfrom ircbuilder import MinetestConnection, NICK_MAX_LEN\nfrom coderdojo import ircserver, mtuser, mtuserpass, mtbotnick, channel\n\n\ndef test_minetest():\n    pybotnick \u003d \"pt\" + mtuser\n    if len(pybotnick) \u003e NICK_MAX_LEN:\n        pybotnick \u003d pybotnick[0:NICK_MAX_LEN]\n    mc \u003d MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick\u003dpybotnick)\n    task \u003d int(mc.send_cmd(\"get_player_task \" + mtuser))\n    if task \u003e 9:\n        passed()\n        return True\n    else:\n        failed(\"Failed: Check \u0027Task 9 Assessment\u0027 sign in minetest to find out what else is required\")\n        return False\n\n\ndef test_answer_placeholders():\n    placeholders \u003d get_answer_placeholders()\n    placeholder \u003d placeholders[0]\n    if placeholder \u003d\u003d \"\":       # TODO: your condition here\n        passed()\n    else:\n        failed()\n\n\nif __name__ \u003d\u003d \u0027__main__\u0027:\n    if not test_minetest():\n        run_common_tests()\n    # test_answer_placeholders()       # TODO: uncomment test call\n\n"
          },
          "task_texts": {
            "task": "\u003chtml\u003e\n\u003ch1\u003eTask 9 - Stairs and rail\u003c/h1\u003e\n\u003cp\u003ePut rail and powered rail along centre of your tunnel.\nWhere the tunnel is sloping, place stairs down the left side. \u003c/p\u003e\n\u003cp\u003eStairs need a direction as well as a type. The type is \"stairs:stair_stonebrick\". \nThe direction is stored in a second parameter called param2. To use \na second parameter we use JSON (JavaScript Object Notation). The JSON string for \nstonebrick stairs sloping upward to positive z is\u003cp\u003e \n\u003ccode\u003e\u0027{\"name\":\"stairs:stair_stonebrick\",\"param2\":\"0\"}\u0027\u003c/code\u003e\n\u003cp\u003eThe different values of param2 are\u003c/p\u003e\n\u003cdiv style\u003d\"font-family:monospace\"\u003e0: z direction upward\u003c/div\u003e\n\u003cdiv style\u003d\"font-family:monospace\"\u003e1: x direction upward\u003c/div\u003e\n\u003cdiv style\u003d\"font-family:monospace\"\u003e2: z direction downward\u003c/div\u003e\n\u003cdiv style\u003d\"font-family:monospace\"\u003e3: x direction downward\u003c/div\u003e\n\u003cp\u003eThe \u0027Check Task\u0027 button above relies on minetest to evaluate this task.\nYou may have to press it again when your program has finished to ensure \nminetest has had time to evaluate it.\u003c/p\u003e\n\u003c/html\u003e"
          },
          "task_type": "edu"
        }
      ]
    },
    {
      "id": 0,
      "title": "Edu additional materials",
      "task_list": [
        {
          "name": "Edu additional materials",
          "stepic_id": 0,
          "position": 0,
          "task_files": {},
          "test_files": {
            "requirements.txt": "ircbuilder\n",
            "pref.py": "x\u003d100\ny\u003d14\n",
            "coderdojo.py": "mtuser \u003d \"\"\nmtuserpass \u003d \"\"\nircserver \u003d \"192.168.3.13\"\nmtbotnick \u003d \"mtserver\"\nchannel \u003d \"#coderdojo\"\n",
            "test_helper.py": "import sys\n\n\ndef get_file_text(path):\n    \"\"\" Returns file text by path\"\"\"\n    file_io \u003d open(path, \"r\")\n    text \u003d file_io.read()\n    file_io.close()\n    return text\n\n\ndef get_file_output(encoding\u003d\"utf-8\", path\u003dsys.argv[-1], arg_string\u003d\"\"):\n    \"\"\"\n    Returns answer file output\n    :param encoding: to decode output in python3\n    :param path: path of file to execute\n    :return: list of strings\n    \"\"\"\n    import subprocess\n\n    proc \u003d subprocess.Popen([sys.executable, path], stdin\u003dsubprocess.PIPE, stdout\u003dsubprocess.PIPE,\n                            stderr\u003dsubprocess.STDOUT)\n    if arg_string:\n        for arg in arg_string.split(\"\\n\"):\n            proc.stdin.write(bytearray(str(arg) + \"\\n\", encoding))\n            proc.stdin.flush()\n\n    return list(map(lambda x: str(x.decode(encoding)), proc.communicate()[0].splitlines()))\n\n\ndef test_file_importable():\n    \"\"\" Tests there is no obvious syntax errors\"\"\"\n    path \u003d sys.argv[-1]\n    if not path.endswith(\".py\"):\n        import os\n\n        parent \u003d os.path.abspath(os.path.join(path, os.pardir))\n        python_files \u003d [f for f in os.listdir(parent) if os.path.isfile(os.path.join(parent, f)) and f.endswith(\".py\")]\n        for python_file in python_files:\n            if python_file \u003d\u003d \"tests.py\":\n                continue\n            check_importable_path(os.path.join(parent, python_file))\n        return\n    check_importable_path(path)\n\n\ndef check_importable_path(path):\n    \"\"\" Checks that file is importable.\n        Reports failure otherwise.\n    \"\"\"\n    saved_input \u003d patch_input()\n    try:\n        import_file(path)\n    except:\n        failed(\"The file contains syntax errors\", test_file_importable.__name__)\n        return\n    finally:\n        revert_input(saved_input)\n\n    passed(test_file_importable.__name__)\n\n\ndef patch_input():\n    def mock_fun(_m\u003d\"\"):\n        return \"mock\"\n\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        save_input \u003d builtins.input\n        builtins.input \u003d mock_fun\n        return save_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        save_input \u003d __builtin__.raw_input\n        __builtin__.raw_input \u003d mock_fun\n        __builtin__.input \u003d mock_fun\n        return save_input\n\n\ndef revert_input(saved_input):\n    if sys.version_info[0] \u003d\u003d 3:\n        import builtins\n        builtins.input \u003d saved_input\n    elif sys.version_info[0] \u003d\u003d 2:\n        import __builtin__\n        __builtin__.raw_input \u003d saved_input\n        __builtin__.input \u003d saved_input\n\n\ndef import_file(path):\n    \"\"\" Returns imported file \"\"\"\n    if sys.version_info[0] \u003d\u003d 2 or sys.version_info[1] \u003c 3:\n        import imp\n\n        return imp.load_source(\"tmp\", path)\n    elif sys.version_info[0] \u003d\u003d 3:\n        import importlib.machinery\n\n        return importlib.machinery.SourceFileLoader(\"tmp\", path).load_module(\"tmp\")\n\n\ndef import_task_file():\n    \"\"\" Returns imported file.\n        Imports file from which check action was run\n    \"\"\"\n    path \u003d sys.argv[-1]\n    return import_file(path)\n\n\ndef test_is_not_empty():\n    \"\"\"\n        Checks that file is not empty\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if len(file_text) \u003e 0:\n        passed()\n    else:\n        failed(\"The file is empty. Please, reload the task and try again.\")\n\n\ndef test_text_equals(text, error_text):\n    \"\"\"\n        Checks that answer equals text.\n    \"\"\"\n    path \u003d sys.argv[-1]\n    file_text \u003d get_file_text(path)\n\n    if file_text.strip() \u003d\u003d text:\n        passed()\n    else:\n        failed(error_text)\n\n\ndef test_answer_placeholders_text_deleted(error_text\u003d\"Don\u0027t just delete task text\"):\n    \"\"\"\n        Checks that all answer placeholders are not empty\n    \"\"\"\n    windows \u003d get_answer_placeholders()\n\n    for window in windows:\n        if len(window) \u003d\u003d 0:\n            failed(error_text)\n            return\n    passed()\n\n\ndef set_congratulation_message(message):\n    \"\"\" Overrides default \u0027Congratulations!\u0027 message \"\"\"\n    print(\"#educational_plugin CONGRATS_MESSAGE \" + message)\n\n\ndef failed(message\u003d\"Please, reload the task and try again.\", name\u003dNone):\n    \"\"\" Reports failure \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" FAILED + \" + message)\n\n\ndef passed(name\u003dNone):\n    \"\"\" Reports success \"\"\"\n    if not name:\n        name \u003d sys._getframe().f_back.f_code.co_name\n    print(\"#educational_plugin \" + name + \" test OK\")\n\n\ndef get_answer_placeholders():\n    \"\"\"\n        Returns all answer placeholders text\n    \"\"\"\n    prefix \u003d \"#educational_plugin_window \u003d \"\n    path \u003d sys.argv[-1]\n    import os\n\n    file_name_without_extension \u003d os.path.splitext(path)[0]\n    windows_path \u003d file_name_without_extension + \"_windows\"\n    windows \u003d []\n    f \u003d open(windows_path, \"r\")\n    window_text \u003d \"\"\n    first \u003d True\n    for line in f.readlines():\n        if line.startswith(prefix):\n            if not first:\n                windows.append(window_text.strip())\n            else:\n                first \u003d False\n            window_text \u003d line[len(prefix):]\n        else:\n            window_text +\u003d line\n\n    if window_text:\n        windows.append(window_text.strip())\n\n    f.close()\n    return windows\n\n\ndef check_samples(samples\u003d()):\n    \"\"\"\n      Check script output for all samples. Sample is a two element list, where the first is input and\n      the second is output.\n    \"\"\"\n    for sample in samples:\n        if len(sample) \u003d\u003d 2:\n            output \u003d get_file_output(arg_string\u003dstr(sample[0]))\n            if \"\\n\".join(output) !\u003d sample[1]:\n                failed(\n                    \"Test from samples failed: \\n \\n\"\n                    \"Input:\\n{}\"\n                    \"\\n \\n\"\n                    \"Expected:\\n{}\"\n                    \"\\n \\n\"\n                    \"Your result:\\n{}\".format(str.strip(sample[0]), str.strip(sample[1]), \"\\n\".join(output)))\n                return\n        set_congratulation_message(\"All test from samples passed. Now we are checking your solution on Stepic server.\")\n\n    passed()\n\n\ndef run_common_tests(error_text\u003d\"Please, reload file and try again\"):\n    test_is_not_empty()\n    test_answer_placeholders_text_deleted()\n    test_file_importable()\n"
          },
          "task_texts": {},
          "task_type": "edu"
        }
      ]
    }
  ],
  "summary": "Exercises to teach programming using a Minetest server with plugins irc, irc_commands, signs_lib, pymt",
  "title": "Minetest",
  "programming_language": "Python",
  "language": "en"
}