<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <RemoteCourse>
          <option name="additionalMaterialsUpdateDate" value="0" />
          <option name="authors">
            <list>
              <StepikUserInfo>
                <option name="firstName" value="D" />
                <option name="guest" value="false" />
                <option name="id" value="-1" />
                <option name="lastName" value="Tim Cummings" />
              </StepikUserInfo>
            </list>
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Course Creator" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="Teaches simple python concepts using a virtual world in minetest. This course can use the free online minetest server at demo.pythonator.com:30000. This is the second course in stream b of pythonator series.&#10;&#10;https://pythonator.com&#10;&#10;Requires PyCharm Edu 2018.3 or later" />
          <option name="fromZip" value="false" />
          <option name="id" value="47300" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="39599470" />
            </list>
          </option>
          <option name="language" value="Python 3.x" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="pythonator b2 easy" />
          <option name="public" value="true" />
          <option name="sectionIds">
            <list>
              <option value="67508" />
            </list>
          </option>
          <option name="stepikChangeStatus" value="Info changed" />
          <option name="type" value="pycharm7 Python 3.x" />
          <option name="updateDate" value="1545103549000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" value="lesson1" />
                <option name="id" value="179702" />
                <option name="index" value="1" />
                <option name="name" value="lesson1" />
                <option name="stepikChangeStatus" value="Info changed" />
                <option name="updateDate" value="1539158931000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Minetest setup&#10;&#10;1.  The first step is to play Minetest :). Play online and connect to a Pythonator server.&#10;    You can even connect to the free server at `demo.pythonator.com` using port `30000`.&#10;    Use a name and password of your choosing, and as long as no-one else has chosen that&#10;    name you will be able to login.&#10;2.  Please don't use spaces in your name or password. If you need to change your password in&#10;    Minetest press the [esc] key and click the [Change password] button.&#10;3.  Don't use a password you want keep secret because there is very low security on this&#10;    server and other people can find out your password. I don't mind if your password&#10;    is just &quot;*password*&quot; but be prepared for others to login as you if you&#10;    do that.&#10;4.  Check if you have the `irc_builder` privilege by typing&#10;    `/privs` in Minetest chat. It should be automatic but if not ask&#10;    the Minetest op for that privilege.&#10;5.  Fill in your connection details to Minetest in the program on the left.&#10;    * Enter your name as mtuser (mtuser=&quot;myname&quot;)&#10;    * Enter your password as mtuserpass (mtuserpass=&quot;mysecret&quot;)&#10;    * Find your z value from the sign in Minetest with your name in it. Every player gets a unique value.&#10;    * Server details default for the &lt;code&gt;demo.pythonator.com&lt;/code&gt; server. For other servers ask your Minetest op.&#10;6.  Click the [Check] button below.&#10;7.  When you have completed this setup correctly you will see &quot;Congratulations!&quot;.&#10;    Click the [Next] button to move to the first task.&#10;&#10;Here is an example of how to fill in the details for LAN servers at CoderDojo.&#10;&#10;    mtuser = &quot;tim&quot;                # your minetest username&#10;    mtuserpass = &quot;not_so_secret&quot;  # your minetest password. This file is not encrypted so don't use anything you want kept secret&#10;    player_z = 10                 # your z value from sign in minetest with your username on it&#10;&#10;    # The following must match your settings in minetest server &gt; Settings &gt; Advanced Settings &gt; Mods &gt; irc &gt; Basic &gt;&#10;    ircserver = &quot;192.168.17.100&quot;  # same as IRC server&#10;    mtbotnick = &quot;mtserver&quot;        # same as Bot nickname&#10;    channel = &quot;#coderdojo&quot;        # same as Channel to join&#10;&#10;&lt;div class='hint'&gt;&#10;In Minetest, find the sign with your name and your player_z will be the z value on that sign.&#10;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Sign will look like the following:&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div align=&quot;center&quot;&gt;tim&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;x=100&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;y=14&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;z=10&lt;/div&gt;&#10;&lt;br&gt;&#10;In this case use &lt;code&gt;player_z = 10&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;ircserver can be a host name (eg &quot;irc.triptera.com.au&quot;) or ip address (&quot;192.168.17.100&quot;) of the chat server. &lt;/div&gt;&#10;&lt;div class='hint'&gt;Channel names start with ## if it is not a permanent channel, or # for a permanent channel&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Set up Minetest" />
                      <option name="status" value="Failed" />
                      <option name="stepId" value="505956" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="10" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="username" />
                                      <option name="possibleAnswer" value="username" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="60" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="password" />
                                      <option name="possibleAnswer" value="password" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="178" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="0" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="19" />
                                      <option name="offset" value="371" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="irc.triptera.com.au" />
                                      <option name="possibleAnswer" value="irc.triptera.com.au" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="427" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="mtserver" />
                                      <option name="possibleAnswer" value="mtserver" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="11" />
                                      <option name="offset" value="472" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="#pythonator" />
                                      <option name="possibleAnswer" value="#pythonator" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from ircbuilder import MinetestConnection&#10;import os.path&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;def test_config():&#10;    # Stepik changes directory structure so check first which directory structure&#10;    config_path = &quot;../../minetest_irc.py&quot;&#10;    if not os.path.exists(config_path):&#10;        if os.path.exists(&quot;../&quot; + config_path):&#10;            config_path = &quot;../&quot; + config_path&#10;    from task import mtuser, mtuserpass, mtbotnick, ircserver, channel, player_z&#10;    file = open(config_path, &quot;w&quot;)&#10;    file.write('mtuser = &quot;' + mtuser + '&quot;       # your minetest username\n')&#10;    file.write('mtuserpass = &quot;' + mtuserpass + '&quot;   # your minetest password. This file is not encrypted so don\'t use anything you want kept secret\n')&#10;    file.write('player_z = ' + str(player_z) + '  # your z value from sign in minetest with your username on it\n')&#10;    file.write('\n')&#10;    file.write('# The following must match your settings in minetest server &gt; Settings &gt; Advanced Settings &gt; Mods &gt; irc &gt; Basic &gt;\n')&#10;    file.write('ircserver = &quot;' + ircserver + '&quot;   # same as IRC server\n')&#10;    file.write('mtbotnick = &quot;' + mtbotnick + '&quot;   # same as Bot nickname\n')&#10;    file.write('channel = &quot;' + channel + '&quot;     # same as Channel to join\n')&#10;    file.close()&#10;    mc = MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)&#10;    z = mc.send_cmd('get_player_z ' + mtuser)&#10;    try:&#10;        if int(z)!=player_z:&#10;            failed(&quot;Your player_z should be &quot; + z + &quot;, not &quot; + str(player_z))&#10;            return False&#10;    except TypeError:&#10;        failed(&quot;Didn't get an int for player_z. Instead got &quot; + str(z) + &quot; which has type &quot; + str(type(z)))&#10;        return False&#10;    except ValueError:&#10;        failed(&quot;Didn't get an int for player_z. Instead got &quot; + str(z) + &quot; which has type &quot; + str(type(z)))&#10;        return False&#10;    passed()&#10;    return True&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_config()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158934000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 1a - Placing a block&#10;Let's start building!&#10;&#10;## Task&#10;Visit the Minetest world and find your sign. It will have coordinates where you need to&#10;create a wool block. Enter the z coordinate in the program on the left.&#10;&#10;&lt;img src=&quot;wool_green.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;This first task teaches you how to place a block using the `build` command from `MinetestConnection`.&#10;The following line places a stone block at x=100, y=14, z=0. The `build` command saves all the blocks&#10;in a `building` and then the `building` is sent to Minetest using the `send_building` command.&#10;&#10;        mc.build(100, 14, 0, &quot;default:stone&quot;)&#10;        mc.send_building()&#10;&#10;The `build` command has 4 parameters.&#10;They are x, y, z, and node_type. The first 3 parameters are the coordinates where the node will be placed.&#10;The last parameter is the name of the material to place. Examples are &quot;default:wood&quot;, &quot;default:dirt&quot;, &quot;wool:blue&quot;, &quot;default:glass&quot;, &quot;carts:rail&quot;.&#10;The material names are the name of the mod they come from, a colon (:), and then the material name within that mod.&#10;&#10;Hints are available by clicking the light bulbs below.&#10;&#10;Click the [Check] button below to check you have completed the task correctly.&#10;Checking the task does not run the task so it will not build anything in the Minetest world.&#10;&#10;Click the green triangle &quot;play&quot; button to run your program or use keyboard ctrl-shift-F10.&#10;This will build your construction in the Minetest world. It is safer to wait until your task checks completely before&#10;building it in Minetest world. However, sometimes it is hard to see where the problem is, so try running it with&#10;the green triangle or ctrl-shift-F10 to build your structure in Minetest. Then play Minetest&#10;and examine what you have built to see where the problem is with your code.&#10;&#10;When you have completed this task (Congratulations!) click the [Next] button to&#10;move to the next task.&#10;&#10;&lt;div class='hint'&gt;The sign asks for orange wool but any colour will be considered correct.&lt;/div&gt;&#10;&lt;div class='hint'&gt;The missing number is the z coordinate where you want to place the wool.&lt;/div&gt;&#10;&lt;div class='hint'&gt;Find the z coordinate by logging in to Minetest and finding the sign with your name on it.&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Placing a block" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505957" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="219" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="20" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="wool_green.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="wool_green.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    return nodebuilder.build(100, 14, player_z, r&quot;wool:(white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet)&quot;)&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158937000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 1b - Placing a block using variables&#10;This is a repeat of Minetest Task 1 using variables instead of numbers. Fill in the rectangles&#10;in the program task.py on the left. Use hints to find out exactly what needs to be done.&#10;Ctrl-shift-F10 to run the program. &quot;Check&quot; button below to check it is completed correctly.&#10;After you have successfully completed this task, click the &quot;Next&quot; button to go to the next task.&#10;&#10;## Task&#10;Store coordinates of wool location in variables and then use variables in the build command to&#10;place the wool.&#10;&#10;&lt;img src=&quot;wool_blue.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;Variables are memory to store data in a computer program.&#10;They can store numbers or text or many other forms of data.&#10;To store data in a variable, give it a name and put the data in it using an equals sign.&#10;&#10;    my_variable = 100&#10;&#10;The above line creates a new variable called `my_variable` and gives it the value 100.&#10;&#10;Storing data in variables helps when you don't know the data when you are writing the program but will know it&#10;when the program is run. For example the z value is different for every player. The program can be written before the&#10;player is known and the z value can be filled later. The program on the left has a variable called `ref_z` which&#10;stores the player's z value. It is called `ref_z` because all your building will use it as a reference coordinate&#10;and you will build relative to it.&#10;&#10;To use the data in a variable, type its variable name where you previously typed the data. For example, if your `ref_z` was 0:&#10;&#10;    mc.build(100, 14, 0, &quot;wool:blue&quot;)&#10;&#10;becomes&#10;&#10;    mc.build(ref_x, ref_y, ref_z, wool)&#10;&#10;&#10;&lt;div class='hint'&gt;The first answer is a number and is the y coordinate from sign for position to place block&lt;/div&gt;&#10;&lt;div class='hint'&gt;The second answer is a number and is the z coordinate from sign for position to place block&lt;/div&gt;&#10;&lt;div class='hint'&gt;The third answer is the name of the variable containing the x value&lt;/div&gt;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Placing a block using variables" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505958" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="221" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="14" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="232" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="10" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="264" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="ref_x" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="wool_blue.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="wool_blue.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    return nodebuilder.build(100, 14, player_z, r&quot;wool:(white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet)&quot;)&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158939000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 2 - Placing several blocks&#10;This is the easy course. Whenever the task asks for variable names&#10;or a formula, then it is also correct to just type in a number or list of numbers. The only&#10;time this won't work is for variables in loops.&#10;&#10;## Task&#10;Find your sign in Minetest to find your second task. Then complete the program on the left&#10;to satisfy the task.&#10;&#10;&lt;img src=&quot;glass_frame.png&quot; width=&quot;100%&quot;/&gt;&#10;&#10;## Lesson&#10;A program starts at the top and runs each line in order. If you want to place&#10;several blocks, create a new `build` command for each block. When you have finished&#10;all the `build` commands, run the `send_building` command to&#10;send all the blocks you have built to Minetest. If two of the `build` commands&#10;have the same x, y, z coordinates, the second will replace the previous block before it even gets sent&#10;to Minetest.&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;ref_z should be set to the value of z on your sign in Minetest.&lt;/div&gt;&#10;&lt;div class='hint'&gt;The second &lt;code&gt;build&lt;/code&gt; command needs an x value. It is the same x value used in every other &lt;code&gt;build&lt;/code&gt; command on this task&lt;/div&gt;&#10;&lt;div class='hint'&gt;The fifth &lt;code&gt;build&lt;/code&gt; command needs a z value for the centre wool block. You can enter a number or the name of the variable containing that number.&lt;/div&gt;&#10;&lt;div class='hint'&gt;The ninth &lt;code&gt;build&lt;/code&gt; command needs the z value for the top right glass block.&#10;Enter the number or a formula which equals that z value.&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Placing several blocks" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505959" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="glass_frame.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="glass_frame.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="209" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="number" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="304" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="100" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="417" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="ref_z" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="552" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="ref_z + 1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    ref_z = player_z&#10;    wool = r&quot;wool:(white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet)&quot;&#10;    glass = r&quot;default:glass&quot;&#10;    &#10;    b = {}&#10;    b.update(nodebuilder.build(100, 13, ref_z - 1, glass))&#10;    b.update(nodebuilder.build(100, 14, ref_z - 1, glass))&#10;    b.update(nodebuilder.build(100, 15, ref_z - 1, glass))&#10;    b.update(nodebuilder.build(100, 13, ref_z, glass))&#10;    b.update(nodebuilder.build(100, 14, ref_z, wool))&#10;    b.update(nodebuilder.build(100, 15, ref_z, glass))&#10;    b.update(nodebuilder.build(100, 13, ref_z + 1, glass))&#10;    b.update(nodebuilder.build(100, 14, ref_z + 1, glass))&#10;    b.update(nodebuilder.build(100, 15, ref_z + 1, glass))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158942000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 3a - Placing blocks using a `for` loop&#10;The previous example was a lot of typing to place 9 blocks. Is there an easier way?&#10;&#10;## Task&#10;Place 9 obsidian glass blocks in a square at x = 99. Centre of square is&#10;y = 14 and z = your player z value from Minetest. This will partially complete Minetest &#10;Task 3 which you can read on your sign in Minetest.&#10;&#10;&lt;img src=&quot;og99.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;In the previous example we needed nine `build` commands to place nine blocks.&#10;Doing repetitive tasks is what computers are good at. If we are repeating the same task several times we tell the&#10;computer to run in a loop until the task has been done the correct number of times. Unfortunately the task was&#10;slightly different each time. Let's look at six of the commands in a slightly different order.&#10;&#10;        mc.build(99, 13, ref_z - 1, glass)&#10;        mc.build(99, 13, ref_z + 1, glass)&#10;        mc.build(99, 14, ref_z - 1, glass)&#10;        mc.build(99, 14, ref_z + 1, glass)&#10;        mc.build(99, 15, ref_z - 1, glass)&#10;        mc.build(99, 15, ref_z + 1, glass)&#10;&#10;There are three pairs of commands which are almost the same except the y coordinate is different each time. This is where a `for`&#10;loop can be used. We use a variable, in this case `y` which has a different value each time through the&#10;loop. We start the loop with&#10;&#10;    for variable_name in sequence:&#10;&#10;The sequence is the list of values to use for that variable&#10;each time through the loop. All the lines to be repeated in the loop are indented. The loop ends when the indentation&#10;finishes. For example:&#10;&#10;    for y in (13, 14, 15):&#10;        print(y)&#10;    print(&quot;finished&quot;)&#10;&#10;will have the following output&#10;&#10;    13&#10;    14&#10;    15&#10;    finished&#10;&#10;The six lines above can be replaced with three lines.&#10;&#10;    for y in (13, 14, 15):&#10;        mc.build(99, y, ref_z - 1, glass)&#10;        mc.build(99, y, ref_z + 1, glass)&#10;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;In the &lt;code&gt;for&lt;/code&gt; loop you need to provide the sequence of numbers containing all the values of y&lt;/div&gt;&#10;&lt;div class='hint'&gt;In the &lt;code&gt;for&lt;/code&gt; loop you need to enclose the sequence of numbers in parentheses (), or square brackets []&lt;/div&gt;&#10;&lt;div class='hint'&gt;In the &lt;code&gt;for&lt;/code&gt; loop the required sequence is &lt;code&gt;(13, 14, 15)&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;In the second build command you need to provide the name of variable which contains the y coordinate of the location to place the glass block&lt;/div&gt;&#10;&lt;div class='hint'&gt;In the second build command you can't just type a number, because the number needs to be different each of the three times through the loop&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Placing blocks using a for loop" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505960" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="og99.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="og99.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="354" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="(13, 14, 15)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="423" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="y" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    ref_z = player_z&#10;&#10;    b = {}&#10;    glass = &quot;default:obsidian_glass&quot;&#10;&#10;    b.update(nodebuilder.build(99, (13, 14, 15), (ref_z - 1, ref_z, ref_z + 1), glass))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158944000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 3b - Placing blocks using nested `for` loops&#10;&#10;Nested loops are a loop within a loop.&#10;&#10;## Task&#10;Place a 3x3 square of obsidian glass at x = 101.&#10;Centre of square at y = 14 and z = player z. Remember you can use formulae (eg ref_z - 1, ref_z, ref_z + 1) or&#10;numbers (eg 19, 20, 21) in the sequence in the `for` statement.&#10;&#10;This will also add to Minetest Task 3. However, because we have used obsidian glass rather&#10;then normal glass, Minetest won't accept your task attempt as complete yet.&#10;&#10;&lt;img src=&quot;og101.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;If you want your program to loop with two values changing you can nest the `for`&#10;loops. We already have a loop for y. Within the loop we can have a loop for z. Any code&#10;in the z loop needs to be indented twice. Code in the y loop is only indented once.&#10;&#10;        for y in (13, 14, 15):&#10;            for z in (19, 20, 21):&#10;                print(&quot;y&quot;, y, &quot;z&quot;, z)&#10;&#10;In your task.py python program on the left, there is&#10;a `print` statement in the `z` loop. When you run the code using ctrl-shift-F10 you can see the&#10;values of `y` and `z` each time through the loop.&#10;&#10;In the sequence of numbers you can use numbers, variables or even formulae using the variables.&#10;Here is an example using formulae.&#10;&#10;        for z in (ref_z - 1, ref_z, ref_z + 1):&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Complete the &lt;code&gt;for z&lt;/code&gt; statement by providing a sequence of numbers for the different values of z.&lt;/div&gt;&#10;&lt;div class='hint'&gt;Enclose values in parentheses () or square brackets []&lt;/div&gt;&#10;&lt;div class='hint'&gt;Values can be numbers or variables or formulae containing variables&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Placing blocks using nested for loops" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505961" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="og101.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="og101.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="338" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="(ref_z - 1, ref_z, ref_z + 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    ref_z = player_z&#10;&#10;    b = {}&#10;    glass = &quot;default:obsidian_glass&quot;&#10;&#10;    b.update(nodebuilder.build(101, (13, 14, 15), (ref_z - 1, ref_z, ref_z + 1), glass))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158947000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 3c - Placing multiple blocks in one build&#10;There is an even easier way than using `for` loops.&#10;&#10;## Task&#10;Place a 3x3x3 cube of glass blocks centred at (100, 14, ref_z). Use wool for the centre block&#10;&#10;Once you have completed this task, Minetest task 3 will be complete.&#10;&#10;&lt;img src=&quot;glass_cube.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;Placing multiple blocks of the same kind at the same time is such a common&#10;requirement, the `build` command has been designed to accept number sequences&#10;for the x, y and z coordinates. Previously we have used a `for` loop.&#10;&#10;        for y in [13, 14, 15]:&#10;            mc.build(99, y, 0, glass)&#10;&#10;This can now be rewritten in one line&#10;&#10;        mc.build(99, [13, 14, 15], 0, glass)&#10;&#10;It will place three glass blocks at (99, 13, 0), (99, 14, 0) and (99, 15, 0).&#10;Number sequences are not restricted to one parameter. If there is more than one sequence&#10;then it works like nested loops.&#10;&#10;        mc.build([99, 100], [13, 14, 15], 0, glass)&#10;&#10;places six glass blocks at (99, 13, 0), (99, 14, 0), (99, 15, 0), (100, 13, 0), (100, 14, 0), (100, 15, 0).&#10;&#10;Each sequence of numbers can be stored in a variable rather than typed directly&#10;in the `build` command. The numbers in the sequences don't even need to be consecutive.&#10;&#10;        seq_x = [99, 101]&#10;        seq_y = [13, 15]&#10;        mc.build(seq_x, seq_y, 0, glass)&#10;&#10;places four glass blocks at (99, 13, 0), (99, 15, 0), (101, 13, 0), (101, 15, 0).&#10;&#10;## Overwriting positions&#10;If you do more than one `build` command for the same position, the second command will overwrite&#10;the first command.&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;seq_x&lt;/code&gt; needs to be a sequnce of values of x for the glass block locations&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;seq_x&lt;/code&gt; numbers should centre on ref_x&lt;/div&gt;&#10;&lt;div class='hint'&gt;Each sequence can use numbers or formulae&lt;/div&gt;&#10;&lt;div class='hint'&gt;Enclose values of each sequence in parentheses () or square brackets []&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;seq_y&lt;/code&gt; needs to be a sequence of y values for the glass blocks&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;seq_z&lt;/code&gt; needs to be a sequence of z values for the glass blocks&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Placing multiple blocks in one build" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505962" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="glass_cube.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="glass_cube.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="305" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="(ref_x - 1, ref_x, ref_x + 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="343" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="(ref_y - 1, ref_y, ref_y + 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="381" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="(ref_z - 1, ref_z, ref_z + 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    ref_z = player_z&#10;&#10;    b = {}&#10;    glass = &quot;default:glass&quot;&#10;    wool = r&quot;wool:(white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet)&quot;&#10;&#10;    b.update(nodebuilder.build((99, 100, 101), (13, 14, 15), (ref_z - 1, ref_z, ref_z + 1), glass))&#10;    b.update(nodebuilder.build(100, 14, ref_z, wool))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158949000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 4 - Tunnel&#10;Visit the Minetest world to find your next task. You will have to climb down a ladder to&#10;find your next task on two signs.&#10;In Minetest you descend ladders using the \&lt;shift&gt; key. To ascend, use \&lt;space&gt; key.&#10;&#10;## Task&#10;Build a tunnel by building a cuboid of glass and then building a cuboid of air in the centre.&#10;&#10;&lt;img src=&quot;glass_cuboid.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;&lt;img src=&quot;glass_tunnel.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;Number sequences are used frequently so Python has a `range()` function which can&#10;produce them easily. The `range()` function has up to three arguments, the start value,&#10;the stop value and the step value. A trap for new coders with the `range()` function is it&#10;counts up to but not including the stop value. This is actually useful because it means when&#10;increment is 1 (the default) the stop value minus the start value is the length of the&#10;sequence, and in our case that means the number of blocks placed.&#10;&#10;The three forms of the `range()` function are:&#10;&#10;        range(stop)&#10;        range(start, stop)&#10;        range(start, stop, step)&#10;&#10;Examples&#10;&#10;        range(3)          # equivalent to (0, 1, 2)&#10;        range(2, 5)       # equivalent to (2, 3, 4)&#10;        range(4, 0)       # equivalent to () because range() won't count backwards by default&#10;        range(4, 0, -1)   # equivalent to (4, 3, 2, 1)&#10;        range(70, 93, 4)  # equivalent to (70, 74, 78, 82, 86, 90)&#10;&#10;Your task in Minetest will have a height, a width, x1, x2, y and z values.&#10;These numbers will need to be assigned correctly to the variables&#10;ref_z, x_max, x_min, floor_y, tunnel_height, tunnel_width.&#10;&#10;In this task store sequences of numbers in range_y_ext and range_z_ext. Start with entering as&#10;lists of numbers. If you feel confident, convert that list to use the `range()`&#10;function. Once that works, try using variable names and formulae. They will be similar to&#10;those used in range_x, range_y_int and range_z_int.&#10;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;x_max is maximum value of x1 and x2&lt;/div&gt;&#10;&lt;div class='hint'&gt;x_min is minimum value of x1 and x2&lt;/div&gt;&#10;&lt;div class='hint'&gt;floor_y is y coordinate of floor of tunnel&lt;/div&gt;&#10;&lt;div class='hint'&gt;tunnel_height is external height of tunnel in number of blocks&lt;/div&gt;&#10;&lt;div class='hint'&gt;tunnel_width is external width of tunnel in number of blocks&lt;/div&gt;&#10;&lt;div class='hint'&gt;range_y_ext is the external y values and is the sequence of y values for glass blocks in wall of tunnel&lt;/div&gt;&#10;&lt;div class='hint'&gt;range_y_ext can be specified using one of the following:&lt;ul&gt;&#10;&lt;li&gt;list of numbers&lt;/li&gt;&#10;&lt;li&gt;list of formulae based on variables&lt;/li&gt;&#10;&lt;li&gt;range using range() function&lt;/li&gt; &lt;/div&gt;&#10;&lt;div class='hint'&gt;The &lt;code&gt;range(start, stop)&lt;/code&gt; function&#10;produces a sequence of consecutive numbers starting with &lt;code&gt;start&lt;/code&gt; and &#10;stopping just before it gets to &lt;code&gt;stop&lt;/code&gt;. It can be used for range_y_ext and range_z_ext.&lt;/div&gt;&#10;&lt;div class='hint'&gt;You can define range_y_ext using &lt;code&gt;range(floor_y, floor_y + tunnel_height)&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;range_z_ext is a sequence of z values starting at &lt;code&gt;wall_z&lt;/code&gt; and stopping just before it gets to &lt;code&gt;wall_z + tunnel_width&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;second parameter of the first build command needs variable containing the sequence of y values for the &lt;b&gt;external&lt;/b&gt; glass of the tunnel&lt;/div&gt;&#10;&lt;div class='hint'&gt;third parameter of the second build command needs variable containing the sequence of z values for the &lt;b&gt;internal&lt;/b&gt; air&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="8" />
                      <option name="name" value="Tunnel" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505963" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="glass_cuboid.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="glass_cuboid.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="glass_tunnel.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="glass_tunnel.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="256" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="93" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="267" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="70" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="280" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="14" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="316" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="7" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="333" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="5" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="635" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(floor_y, floor_y + tunnel_height)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="689" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(wall_z, wall_z + tunnel_width)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="7" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1004" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="range_y_ext" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="8" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1134" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="range_z_int" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    ref_z = player_z&#10;    b = {}&#10;    # glass = &quot;default:glass&quot;&#10;    # wool = r&quot;wool:(white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet)&quot;&#10;    air = &quot;air&quot;&#10;    wall = &quot;default:glass&quot;&#10;    # BUILDING LOCATION&#10;    x_max = 93&#10;    x_min = 70&#10;    floor_y = 14&#10;    # BUILDING SIZE&#10;    tunnel_height = 7&#10;    tunnel_width = 5&#10;    # ENGINEERING CALCULATIONS&#10;    tunnel_length = x_max - x_min + 1&#10;    wall_z = player_z - tunnel_width // 2&#10;    range_x = range(x_min, x_min + tunnel_length)&#10;    range_y_ext = range(floor_y, floor_y + tunnel_height)&#10;    range_z_ext = range(wall_z, wall_z + tunnel_width)&#10;    range_y_int = range(floor_y + 1, floor_y + tunnel_height - 1)&#10;    range_z_int = range(wall_z + 1, wall_z + tunnel_width - 1)&#10;    # BUILD&#10;    b.update(nodebuilder.build(range_x, range_y_ext, range_z_ext, wall))&#10;    # replace the internal glass with air so left with a hollow tunnel&#10;    b.update(nodebuilder.build(range_x, range_y_int, range_z_int, air))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158951000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 5 - Tunnel floor&#10;&#10;Look in your tunnel in the Minetest world to see Task 5.&#10;&#10;## Task&#10;Replace the floor of the tunnel with stone and place a torch every four blocks.&#10;Think carefully when you are filling in your task.py program whether you need &#10;a single number or sequence of numbers for each answer.&#10;&#10;&lt;img src=&quot;tunnel_floor.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;Remember when using the `range()` function you can specify the step as&#10;well as the start and stop values.&#10;&#10;    range(start, stop, step)&#10;&#10;The step value defaults to `1` if you don't include it, which is fine if you are&#10;counting up in ones. However, if you are counting up in fours, include a step value of 4.&#10;If you are counting down, make sure your step is negative.&#10;&#10;        range(93, 70, -4)  # is equivalent to (93, 89, 85, 81, 77, 73)&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;range_x_torch is a sequence of x values for torch locations&lt;/div&gt;&#10;&lt;div class='hint'&gt;replacing the floor with stone requires the same x values as the walls and air.&lt;/div&gt;&#10;&lt;div class='hint'&gt;placing torches requires a number or formula for the y coordinate just above the floor of the tunnel&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="9" />
                      <option name="name" value="Tunnel floor" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505964" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="974" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(x_min, x_min + tunnel_length, 4)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1307" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range_x" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="1385" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="floor_y + 1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tunnel_floor.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tunnel_floor.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    air = &quot;air&quot;&#10;    wall = &quot;default:glass&quot;&#10;    floor = &quot;default:stone&quot;&#10;    torch = &quot;(default:torch|air)&quot;&#10;    # BUILDING LOCATION&#10;    x_max = 93&#10;    x_min = 70&#10;    floor_y = 14&#10;    # BUILDING SIZE&#10;    tunnel_height = 7&#10;    tunnel_width = 5&#10;    # ENGINEERING CALCULATIONS&#10;    tunnel_length = x_max - x_min + 1&#10;    wall_z = player_z - tunnel_width // 2&#10;    range_x = range(x_min, x_min + tunnel_length)&#10;    range_y_ext = range(floor_y, floor_y + tunnel_height)&#10;    range_z_ext = range(wall_z, wall_z + tunnel_width)&#10;    range_y_int = range(floor_y + 1, floor_y + tunnel_height - 1)&#10;    range_z_int = range(wall_z + 1, wall_z + tunnel_width - 1)&#10;    # range_x_torch = range(x_min, x_min + tunnel_length, 4)&#10;    # BUILD&#10;    b.update(nodebuilder.build(range_x, range_y_ext, range_z_ext, wall))&#10;    b.update(nodebuilder.build(range_x, range_y_int, range_z_int, air))&#10;    b.update(nodebuilder.build(range_x, floor_y, range_z_int, floor))&#10;    b.update(nodebuilder.build(range_x, floor_y + 1, player_z + 1, torch))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    if test_building_with_pattern(mc, building_pattern):&#10;        torches = 0&#10;        for key, value in mc.building.items():&#10;            if value == &quot;default:torch&quot;:&#10;                torches += 1&#10;        if torches &lt; 5:&#10;            failed(&quot;Only &quot; + str(torches) + &quot; torches. Should be 6&quot;)&#10;            return False&#10;        if torches &gt; 6:&#10;            failed(&quot;Too many torches. Should be 6. There are &quot; + str(torches))&#10;            return False&#10;        return True&#10;    else:&#10;        return False&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158956000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Wall of glass&#10;There are several steps to this program which is&#10;going to build some arches over the path heading&#10;from your signpost in the positive x direction. Each arch will&#10;have the same profile as a cross section of the tunnel&#10;you have just built.&#10;&#10;## Task&#10;Build a solid wall of glass 7 high x 5 wide at x = 105. Glass block in the centre at the&#10;bottom of the wall should be at y = 9, z = &lt;em&gt;your player z&lt;/em&gt;.&#10;&#10;This is not one of the tasks assigned by Minetest. It is a repetition of Minetest tasks&#10;4 and 5 with some variations.&#10;&#10;&lt;img src=&quot;glass_wall.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;The first step is to build a glass wall. This is similar to the first step in&#10;building the tunnel which was to build a solid glass cuboid.&#10;&#10;* The minimum x value on the path is 105 so store that in variable `path_x_min`&#10;* The stone on the path is at level 9 so store that in variable `floor_y`&#10;* The arch will have same dimensions as tunnel, 7 high and 5 wide, so store in `arch_height` and `arch_width`&#10;&#10;We need to calculate the z position of the sides of the arch. We know the z position&#10;of the centre of the arch and we know the width of the arch. Hence the formula is&#10;&#10;    wall_z = ref_z - arch_width // 2&#10;&#10;We are going to store the x values of the arches in variable `range_x_arch`. For testing we&#10;will start with one x value. Let us use the start of the path which is `path_x_min`.&#10;&#10;    range_x_arch = path_x_min&#10;&#10;Store the external dimensions of the arch in `range_y_ext` and `range_z_ext`.&#10;&#10;    range_y_ext = range(floor_y, floor_y + arch_height)&#10;    range_z_ext = range(wall_z, wall_z + arch_width)&#10;&#10;Remember that the `range()` function returns a sequence of numbers. For&#10;our purposes the formula above for `range_y_ext` is equivalent to typing:&#10;&#10;    range_y_ext = [9, 10, 11, 12, 13, 14, 15]&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Set path_x_min to the x value where path starts. See image above to find value of x&lt;/div&gt;&#10;&lt;div class='hint'&gt;Set floor_y to the y level of stone on path. See lowest value of y in image above&lt;/div&gt;&#10;&lt;div class='hint'&gt;wall_z can be calculated by a formula in terms of ref_z and arch_width&lt;/div&gt;&#10;&lt;div class='hint'&gt;wall_z is the centre of the wall (ref_z) - half of arch width rounded down (arch_width // 2)&lt;/div&gt;&#10;&lt;div class='hint'&gt;x location of first arch&lt;/div&gt;&#10;&lt;div class='hint'&gt;range_y_ext is a formula (in terms of floor_y and arch_height) or numbers for all y values in arch (external dimensions)&lt;/div&gt;&#10;&lt;div class='hint'&gt;range_z_ext is a formula (in terms of wall_z and arch_width) or numbers for all z values in arch (external dimensions)&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="10" />
                      <option name="name" value="Wall of glass" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505965" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="glass_wall.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="glass_wall.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="380" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="105" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="421" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="9" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="512" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="7" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="584" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="5" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="732" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="ref_z - arch_width // 2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="799" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="path_x_min" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="854" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(floor_y, floor_y + arch_height)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="7" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="906" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(wall_z, wall_z + arch_width)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    # BUILDING MATERIALS&#10;    air = &quot;air&quot;&#10;    wall = &quot;default:glass&quot;&#10;    # BUILDING LOCATION&#10;    path_x_min = 105&#10;    floor_y = 9&#10;    # BUILDING SIZE&#10;    arch_height = 7&#10;    arch_width = 5&#10;    # ENGINEERING CALCULATIONS&#10;    wall_z = player_z - arch_width // 2&#10;    range_x_arch = path_x_min&#10;    range_y_ext = range(floor_y, floor_y + arch_height)&#10;    range_z_ext = range(wall_z, wall_z + arch_width)&#10;    # BUILD&#10;    b.update(nodebuilder.build(range(path_x_min, path_x_min + 40), range(floor_y + 1, floor_y + 31), range(player_z - 4, player_z + 5), air))&#10;    b.update(nodebuilder.build(range_x_arch, range_y_ext, range_z_ext, wall))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158969000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Arch - hollow&#10;That wall doesn't look like an arch!&#10;&#10;## Task&#10;Remove the centre part of the&#10;wall so it becomes an arch. Remember for the `range_y_int`&#10;and `range_z_int` you can use a list&#10;of numbers or a formula.&#10;&#10;        range_y_int = [10, 11, 12, 13, 14]&#10;&#10;or&#10;&#10;        range_y_int = range(floor_y + 1, floor_y + arch_height - 1)&#10;&#10;&lt;img src=&quot;arch.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;To remove blocks we replace them with `&quot;air&quot;`.&#10;&#10;In your program, the external dimensions are for&#10;the glass blocks on the outside of the arch `range_y_ext, range_z_ext`.&#10;The internal dimensions are for the air blocks on the&#10;inside of the arch `range_y_int, range_z_int`.&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;range_y_int is a formula or list of numbers for all y values on the inside of the arch which should be air&lt;/div&gt;&#10;&lt;div class='hint'&gt;For range_y_int use the range() function to return a sequence of numbers from one above the floor to one below the ceiling&lt;/div&gt;&#10;&lt;div class='hint'&gt;range_z_int is a formula or list of numbers for all z values which should be air on the inside of the arch&lt;/div&gt;&#10;&lt;div class='hint'&gt;For range_z_int use the range() function to return a sequence of numbers from one block inside the right wall to one block inside the left wall&lt;/div&gt;&#10;&lt;div class='hint'&gt;The third answer requires you to type the full &lt;code&gt;mc.build()&lt;/code&gt; statement to replace inside of arch with air&lt;/div&gt;&#10;&lt;div class='hint'&gt;Use variables range_x_arch, range_y_int, range_z_int and air as parameters for &lt;code&gt;mc.build()&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The final answer to be typed in is &lt;code&gt;mc.build(range_x_arch, range_y_int, range_z_int, air)&lt;/code&gt;.&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="11" />
                      <option name="name" value="Arch" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505966" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="arch.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="arch.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="985" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(floor_y + 1, floor_y + arch_height - 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1045" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(wall_z + 1, wall_z + arch_width - 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="1450" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="mc.build(range_x_arch, range_y_int, range_z_int, air)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    # BUILDING MATERIALS&#10;    air = &quot;air&quot;&#10;    wall = &quot;default:glass&quot;&#10;    # BUILDING LOCATION&#10;    path_x_min = 105&#10;    floor_y = 9&#10;    # BUILDING SIZE&#10;    arch_height = 7&#10;    arch_width = 5&#10;    # ENGINEERING CALCULATIONS&#10;    wall_z = player_z - arch_width // 2&#10;    range_x_arch = path_x_min&#10;    range_y_ext = range(floor_y, floor_y + arch_height)&#10;    range_z_ext = range(wall_z, wall_z + arch_width)&#10;    range_y_int = range(floor_y + 1, floor_y + arch_height - 1)&#10;    range_z_int = range(wall_z + 1, wall_z + arch_width - 1)&#10;    # BUILD&#10;    b.update(nodebuilder.build(range(path_x_min, path_x_min + 40), range(floor_y + 1, floor_y + 31), range(player_z - 4, player_z + 5), air))&#10;    b.update(nodebuilder.build(range_x_arch, range_y_ext, range_z_ext, wall))&#10;    b.update(nodebuilder.build(range_x_arch, range_y_int, range_z_int, air))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158975000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Arch floor&#10;The single arch is almost complete.&#10;&#10;## Task&#10;Fix the floor under the arch by changing it from glass to stone.&#10;&#10;Place a torch on the floor at `(ref_z + 1)`&#10;&#10;&lt;img src=&quot;arch_floor.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;In this task you will need to enter the complete `build` command.&#10;The `build` command is called from a `MinetestConnection` object. If your&#10;`MinetestConnection` object is stored in a variable called `mc` then&#10;`build` can be called from `mc`.&#10;&#10;    mc.build(x, y, z, item)&#10;&#10;where x, y and z are the coordinates of the location to build the item. They can each be single&#10;numbers or sequences of numbers. The item is a str or dict describing the block properties.&#10;(More on dicts later).&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Store in variable floor the name the material for floor of arch&lt;/div&gt;&#10;&lt;div class='hint'&gt;The second answer requires the full &lt;code&gt;mc.build()&lt;/code&gt; to change the three blocks at the base of the arch to stone&lt;/div&gt;&#10;&lt;div class='hint'&gt;The second answer can use the variables range_x_arch, floor_y, range_z_int, floor&lt;/div&gt;&#10;&lt;div class='hint'&gt;The third answer requires the full &lt;code&gt;mc.build()&lt;/code&gt; command to place a torch at &lt;code&gt;range_x_arch, floor_y + 1, player_z + 1&lt;/code&gt;&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="12" />
                      <option name="name" value="Arch floor" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505967" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="arch_floor.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="arch_floor.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="832" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="string" />
                                      <option name="possibleAnswer" value="&quot;default:stone&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="1768" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="mc.build(range_x_arch, floor_y, range_z_int, floor)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="1849" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="mc.build(range_x_arch, floor_y + 1, ref_z + 1, torch)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    # BUILDING MATERIALS&#10;    air = &quot;air&quot;&#10;    wall = &quot;default:glass&quot;&#10;    floor = &quot;default:stone&quot;&#10;    torch = &quot;default:torch&quot;&#10;    # BUILDING LOCATION&#10;    path_x_min = 105&#10;    floor_y = 9&#10;    # BUILDING SIZE&#10;    arch_height = 7&#10;    arch_width = 5&#10;    # ENGINEERING CALCULATIONS&#10;    wall_z = player_z - arch_width // 2&#10;    range_x_arch = path_x_min&#10;    range_y_ext = range(floor_y, floor_y + arch_height)&#10;    range_z_ext = range(wall_z, wall_z + arch_width)&#10;    range_y_int = range(floor_y + 1, floor_y + arch_height - 1)&#10;    range_z_int = range(wall_z + 1, wall_z + arch_width - 1)&#10;    # BUILD&#10;    b.update(nodebuilder.build(range(path_x_min, path_x_min + 40), range(floor_y + 1, floor_y + 31), range(player_z - 4, player_z + 5), air))&#10;    b.update(nodebuilder.build(range_x_arch, range_y_ext, range_z_ext, wall))&#10;    b.update(nodebuilder.build(range_x_arch, range_y_int, range_z_int, air))&#10;    b.update(nodebuilder.build(range_x_arch, floor_y, range_z_int, floor))&#10;    b.update(nodebuilder.build(range_x_arch, floor_y + 1, player_z + 1, torch))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158980000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Arches&#10;Now that you have built one arch it is easy to build several arches.&#10;&#10;## Task&#10;Change the value of `range_x_arch` to be a sequence of four x values where&#10;each arch is separated by three blocks. ie the values are counting up in fours.&#10;&#10;&lt;img src=&quot;arches.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Change the value in one variable to build four arches instead of one arch&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_x_arch&lt;/code&gt; needs to be the list of numbers or formula to return a sequence of four x values, every 4 blocks starting at path_x_min&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;[105, 109, 113, 117]&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;is one answer&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range(path_x_min, path_xmin + path_length, 4)&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;is another answer&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="13" />
                      <option name="name" value="Arches" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505968" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="arches.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="arches.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="880" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(path_x_min, path_x_min + path_length, 4)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    # BUILDING MATERIALS&#10;    air = &quot;air&quot;&#10;    wall = &quot;default:glass&quot;&#10;    floor = &quot;default:stone&quot;&#10;    torch = &quot;default:torch&quot;&#10;    # BUILDING LOCATION&#10;    path_x_min = 105&#10;    floor_y = 9&#10;    # BUILDING SIZE&#10;    arch_height = 7&#10;    arch_width = 5&#10;    path_length = 16&#10;    # ENGINEERING CALCULATIONS&#10;    wall_z = player_z - arch_width // 2&#10;    range_x_arch = range(path_x_min, path_x_min + path_length, 4)&#10;    range_y_ext = range(floor_y, floor_y + arch_height)&#10;    range_z_ext = range(wall_z, wall_z + arch_width)&#10;    range_y_int = range(floor_y + 1, floor_y + arch_height - 1)&#10;    range_z_int = range(wall_z + 1, wall_z + arch_width - 1)&#10;    # BUILD&#10;    b.update(nodebuilder.build(range(path_x_min, path_x_min + 40), range(floor_y + 1, floor_y + 31), range(player_z - 4, player_z + 5), air))&#10;    b.update(nodebuilder.build(range_x_arch, range_y_ext, range_z_ext, wall))&#10;    b.update(nodebuilder.build(range_x_arch, range_y_int, range_z_int, air))&#10;    b.update(nodebuilder.build(range_x_arch, floor_y, range_z_int, floor))&#10;    b.update(nodebuilder.build(range_x_arch, floor_y + 1, player_z + 1, torch))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158988000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Castle base&#10;We are going to start by building the base of the castle.&#10;The base will be a room with four walls and no roof. We can &#10;build this by building a cuboid of stone and then inside that&#10;a cuboid of air. We will replace two blocks in the front wall&#10;to make a doorway.&#10;&#10;The base section of the castle will be 5 blocks high.&#10;The length of the castle will be 9 blocks. The width of the &#10;castle will be 5 blocks.&#10;&#10;## Task&#10;Create a 9 x 5 x 5 open top stone box starting at x = 121, y = 9. Add a 2 x 1 doorway.&#10;&#10;&lt;img src=&quot;castle_base.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;castle_length&lt;/code&gt; needs to be the length of castle as number of blocks at the base in the x direction&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;castle_width&lt;/code&gt; needs to be the width of castle as a number of blocks at the base in the z direction&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;castle_height&lt;/code&gt; needs to be the height of base of castle as a number of blocks including the floor but excluding the roof&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;wall_z&lt;/code&gt; needs to be the formula in terms of &lt;code&gt;ref_z&lt;/code&gt; and &lt;code&gt;castle_width&lt;/code&gt; to determine where to build the first wall. &lt;/div&gt;&#10;&lt;div class='hint'&gt;Castle &lt;code&gt;wall_z&lt;/code&gt; is similar to formulae used for arch &lt;code&gt;wall_z&lt;/code&gt; and tunnel &lt;code&gt;wall_z&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;p&gt;For arch we used&lt;/p&gt;&#10;&lt;code&gt;wall_z = ref_z - arch_width // 2&lt;/code&gt; &lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;wall_z = ref_z - castle_width // 2&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_x_castle_ext&lt;/code&gt; needs to be the sequence of numbers for all x values of stone to be placed at base of castle&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_x_castle_ext&lt;/code&gt; sequence should start at &lt;code&gt;castle_x_min = 121&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;and have &lt;code&gt;castle_length  = 9&lt;/code&gt; blocks.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_x_castle_ext&lt;/code&gt; can use a list of numbers or a formula using &lt;code&gt;range()&lt;/code&gt; function&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_x_castle_ext&lt;/code&gt; can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;[121, 122, 123, 124, 125, 126, 127, 128, 129]&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;range(121, 130)&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;range(castle_x_min, castle_xmin + castle_length)&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_y_castle_ext&lt;/code&gt; needs to be the sequence of numbers for all y values of stone in base of castle&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_y_castle_ext&lt;/code&gt; needs to include the stone on the floor of the castle at &lt;code&gt;floor_y = 9&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_y_castle_ext&lt;/code&gt; can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;[9, 10, 11, 12, 13]&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;range(9, 14)&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;range(floor_y, floor_y + castle_height)&lt;/code&gt;&#10;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_z_castle_ext&lt;/code&gt; needs to be sequence of numbers for all z values of stone at base of castle&lt;/div&gt;&#10;&lt;div class='hint'&gt;To build the doorway provide the sequence of y values to make a doorway in front wall of castle&lt;/div&gt;&#10;&lt;div class='hint'&gt;Doorway is two blocks high so need two numbers&lt;/div&gt;&#10;&lt;div class='hint'&gt;Doorway can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;[10, 11]&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;[floor_y + 1, floor_y + 2]&lt;/code&gt;&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="14" />
                      <option name="name" value="Castle base" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505969" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="castle_base.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="castle_base.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="540" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="9" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="589" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="5" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="654" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="5" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="813" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="ref_z - castle_width // 2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="897" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(castle_x_min, castle_x_min + castle_length)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="968" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(floor_y, floor_y + castle_height)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1029" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(wall_z, wall_z + castle_width)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="7" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1718" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="[floor_y + 1, floor_y + 2]" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    path_x_min = 105&#10;    castle_x_min = 121&#10;    floor_y = 9&#10;    # BUILDING SIZE&#10;    castle_length = 9&#10;    castle_width = 5&#10;    castle_height = 5&#10;    # BUILDING MATERIALS&#10;    air = &quot;air&quot;&#10;    castle = &quot;default:stone&quot;&#10;    # ENGINEERING CALCULATIONS&#10;    wall_z = player_z - castle_width // 2&#10;    range_x_castle_ext = range(castle_x_min, castle_x_min + castle_length)&#10;    range_y_castle_ext = range(floor_y, floor_y + castle_height)&#10;    range_z_castle_ext = range(wall_z, wall_z + castle_width)&#10;    range_x_castle_int = range(castle_x_min + 1, castle_x_min + castle_length - 1)&#10;    range_y_castle_int = range(floor_y + 1, floor_y + castle_height)&#10;    range_z_castle_int = range(wall_z + 1, wall_z + castle_width - 1)&#10;    # BUILD&#10;    b.update(nodebuilder.build(range(castle_x_min - 1, castle_x_min + castle_length + 10), range(floor_y + 1, floor_y + 31), range(player_z - 4, player_z + 5), air))&#10;    b.update(nodebuilder.build(range_x_castle_ext, range_y_castle_ext, range_z_castle_ext, castle))&#10;    b.update(nodebuilder.build(range_x_castle_int, range_y_castle_int, range_z_castle_int, air))&#10;    b.update(nodebuilder.build(castle_x_min, [floor_y + 1, floor_y + 2], player_z, air))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158994000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Castle windows&#10;Let us place some iron bar type windows on the front wall and side walls&#10;    of the castle.&#10;&#10;## Task&#10;Place three windows on each side wall. The windows will&#10;be 3 blocks high and one block wide and evenly spaced along the side&#10;wall. They will not touch the floor but can go to the full height of&#10;the castle base.&#10;&#10;Place one window along the front wall. It will be three blocks wide&#10;and one block high. It will be placed on the top row of blocks of the &#10;castle base.&#10;&#10;&lt;img src=&quot;castle_windows.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Lesson&#10;We will use bars for our windows &quot;xpanes:bar_flat&quot;.&#10;The problem with bars is we have to specify a direction as well&#10;as a the building material name.&#10;&#10;Python has a dict type which means dictionary. A dict contains&#10;multiple pieces of data in a single variable. We have also&#10;seen lists store multiple pieces of data.&#10;&#10;    my_list = [13, 14, 15]&#10;&#10;The difference with dicts is they can give names to&#10;each piece of data in the variable. The names are called keys&#10;and you use the key to specify which piece of data you want.&#10;&#10;    my_dict = {&quot;name&quot;:&quot;xpanes:bar_flat&quot;, &quot;direction&quot;:&quot;+x&quot;}&#10;&#10;The example above has two pieces of data, &quot;xpanes:bar_flat&quot; is a&#10;str and is the first piece of data. It has a key &quot;name&quot;. The second&#10;piece of data is &quot;+x&quot; which is also a str. It has a key &quot;direction&quot;.&#10;&#10;For &quot;xpanes:bar_flat&quot; there are two possible directions&#10;and they are the directions in which a player would be looking to&#10;look through the window. The &quot;+x&quot; direction means player would be looking in direction&#10;of the x axis. If no direction is specified then &quot;+x&quot; is used by default.&#10;The &quot;+z&quot; direction means player would be looking in the direction&#10;of the z axis.&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;wall_z2&lt;/code&gt; needs to be the number or formula giving the z coordinate to the castle wall opposite wall_z1&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_y_window&lt;/code&gt; needs to be the numbers or formula giving the three numbers for the y coordinates of the vertical windows on each side of the castle&lt;/div&gt;&#10;&lt;div class='hint'&gt;For &lt;code&gt;range_y_window&lt;/code&gt; the bottom window block is two blocks above floor block.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_y_window&lt;/code&gt; can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;[11, 12, 13]&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;range(11, 14)&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;range(floor_y + 2, floor_y + castle_height)&lt;/code&gt; &lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_x_window&lt;/code&gt; needs to be the numbers or formula for the x positions of the windows on either side of the castle&lt;/div&gt;&#10;&lt;div class='hint'&gt;For &lt;code&gt;range_x_window&lt;/code&gt; there will be three vertical windows on either side so sequence will have three numbers&lt;/div&gt;&#10;&lt;div class='hint'&gt;For &lt;code&gt;range_x_window&lt;/code&gt; the first x value is 2 blocks after front wall which is &lt;code&gt;castle_x_min + 2&lt;/code&gt; which is &lt;code&gt;123&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_x_window&lt;/code&gt; can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;[123, 125, 127]&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;range(123, 128, 2)&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;range(castle_x_min + 2, castle_x_min + castle_length - 2, 2)&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;For windows on side walls, build command needs the name of variable storing the building material to use for windows on the side wall&lt;/div&gt;&#10;&lt;div class='hint'&gt;The side walls are parallel with the x axis so looking through the windows would be looking along the z axis&lt;/div&gt;&#10;&lt;div class='hint'&gt;For windows on front wall, build command needs the name of variable storing building material to be used for windows on the front wall&lt;/div&gt;&#10;&lt;div class='hint'&gt;Front wall is parallel with the z axis&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="15" />
                      <option name="name" value="Castle windows" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505970" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="castle_windows.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="castle_windows.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="1051" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="ref_z + castle_width // 2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1636" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(floor_y + 2, floor_y + castle_height)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1770" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(castle_x_min + 2, castle_x_min + castle_length - 2, 2)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="2365" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="window_z" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="2470" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="window_x" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    path_x_min = 105&#10;    castle_x_min = 121&#10;    floor_y = 9&#10;    # BUILDING SIZE&#10;    castle_length = 9&#10;    castle_width = 5&#10;    castle_height = 5&#10;    # BUILDING MATERIALS&#10;    air = &quot;air&quot;&#10;    castle = &quot;default:stone&quot;&#10;    window_x = {'name':&quot;xpanes:bar_flat&quot;, 'direction':r'(\+|\-)x'}&#10;    window_z = {'name':&quot;xpanes:bar_flat&quot;, 'direction':r'(\+|\-)z'}&#10;    # ENGINEERING CALCULATIONS&#10;    wall_z1 = player_z - castle_width // 2&#10;    wall_z2 = player_z + castle_width // 2&#10;    range_x_castle_ext = range(castle_x_min, castle_x_min + castle_length)&#10;    range_y_castle_ext = range(floor_y, floor_y + castle_height)&#10;    range_z_castle_ext = range(wall_z1, wall_z1 + castle_width)&#10;    range_x_castle_int = range(castle_x_min + 1, castle_x_min + castle_length - 1)&#10;    range_y_castle_int = range(floor_y + 1, floor_y + castle_height)&#10;    range_z_castle_int = range(wall_z1 + 1, wall_z1 + castle_width - 1)&#10;    range_y_window = range(floor_y + 2, floor_y + castle_height)&#10;    range_x_window = range(castle_x_min + 2, castle_x_min + castle_length - 2, 2)&#10;    # BUILD&#10;    b.update(nodebuilder.build(range(castle_x_min - 1, castle_x_min + castle_length + 10), range(floor_y + 1, floor_y + 31), range(player_z - 4, player_z + 5), air))&#10;    b.update(nodebuilder.build(range_x_castle_ext, range_y_castle_ext, range_z_castle_ext, castle))&#10;    b.update(nodebuilder.build(range_x_castle_int, range_y_castle_int, range_z_castle_int, air))&#10;    b.update(nodebuilder.build(castle_x_min, [floor_y + 1, floor_y + 2], player_z, air))&#10;    b.update(nodebuilder.build(range_x_window, range_y_window, (wall_z1, wall_z2), window_z))&#10;    b.update(nodebuilder.build(castle_x_min, floor_y + 4, (player_z - 1, player_z, player_z + 1), window_x))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539158998000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Castle roof&#10;The castle roof sits on top of the castle base. It is a similar shape to the castle base,&#10;an open box without a top, but it extends on block on every side in the x and z directions&#10;and is only three blocks high.&#10;&#10;## Task&#10;Add a 11 x 7 x 3 open top stone box on top of the castle base to be the roof.&#10;&#10;Add a ladder so that players can climb up the ladder to the roof. Ladder&#10;needs a direction so that its orientation is known and in which part of the cube of space the&#10;ladder should be placed. See the hints for more details.&#10;&#10;&lt;img src=&quot;castle_roof.png&quot; width=&quot;100%&quot; /&gt;&#10;&lt;img src=&quot;ladder.png&quot; width=&quot;100%&quot;/&gt;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;When setting the &quot;direction&quot; of the ladder use &lt;br&gt;&#10;&lt;code&gt;&quot;+x&quot;&lt;/code&gt; player looking towards higher values of x when climbing ladder&lt;br&gt;&#10;&lt;code&gt;&quot;-x&quot;&lt;/code&gt; player looking towards lower values of x when climbing ladder&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_x_roof_ext&lt;/code&gt; needs to be the numbers or formula returning x values for blocks in roof. Roof extends one extra block on all sides of castle base.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_x_roof_ext&lt;/code&gt; can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;[120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130]&lt;/code&gt;&lt;br&gt;&lt;br&gt;or&lt;br&gt;&#10;&lt;code&gt;range(120, 131)&lt;/code&gt;&lt;br&gt;&lt;br&gt;or&lt;br&gt;&#10;&lt;code&gt;range(castle_x_min - 1, castle_x_min + castle_length + 1)&lt;/code&gt;&#10;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_y_roof_ext&lt;/code&gt; needs to be the y values for roof. Roof starts at &lt;code&gt;floor_y + castle_height&lt;/code&gt; and is 3 blocks high.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_z_roof_ext&lt;/code&gt; needs to be the z values of roof&lt;/div&gt;&#10;&lt;div class='hint'&gt;roof extends over side walls of castle by one block either side&lt;/div&gt;&#10;&lt;div class='hint'&gt;When building the roof for the castle use the same building material as castle walls&lt;/div&gt;&#10;&lt;div class='hint'&gt;When building the internal part of the castle roof use the building material which removes blocks so that players can walk around on roof&lt;/div&gt;&#10;&lt;div class='hint'&gt;The building material &quot;air&quot; removes blocks. It is the only building material which does not contain a colon &quot;:&quot;.&lt;/div&gt;&#10;&lt;div class='hint'&gt;When building the ladder you need to provide the y values of ladder&lt;/div&gt;&#10;&lt;div class='hint'&gt;The ladder starts from the block above the floor&lt;/div&gt;&#10;&lt;div class='hint'&gt;Height of ladder is same as height of castle base. It starts one block higher and finishes one block higher&lt;/div&gt;&#10;&lt;div class='hint'&gt;The y values for the ladder can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;[10, 11, 12, 13, 14]&lt;/code&gt;&lt;br&gt;or&lt;br&gt;&#10;&lt;code&gt;range(10, 15)&lt;/code&gt;&lt;br&gt;or&lt;br&gt;&#10;&lt;code&gt;range(floor_y + 1, floor_y + 1 + castle_height)&lt;code/&gt;&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="16" />
                      <option name="name" value="Castle roof" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="505971" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="castle_roof.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="castle_roof.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="ladder.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="ladder.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="1052" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="string" />
                                      <option name="possibleAnswer" value="&quot;+x&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1998" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(castle_x_min - 1, castle_x_min + castle_length + 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="2075" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(floor_y + castle_height, floor_y + castle_height + 3)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="2154" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(wall_z1 - 1, wall_z1 + castle_width + 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="3097" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="castle" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="3168" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="air" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="3290" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(floor_y + 1, floor_y + castle_height + 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    path_x_min = 105&#10;    castle_x_min = 121&#10;    floor_y = 9&#10;    # BUILDING SIZE&#10;    castle_length = 9&#10;    castle_width = 5&#10;    castle_height = 5&#10;    # BUILDING MATERIALS&#10;    air = &quot;air&quot;&#10;    castle = &quot;default:stone&quot;&#10;    window_x = {'name':&quot;xpanes:bar_flat&quot;, 'direction':r'(\+|\-)x'}&#10;    window_z = {'name':&quot;xpanes:bar_flat&quot;, 'direction':r'(\+|\-)z'}&#10;    ladder = {&quot;name&quot;:&quot;default:ladder_wood&quot;,&quot;direction&quot;:r&quot;\+x&quot;}&#10;    # ENGINEERING CALCULATIONS&#10;    wall_z1 = player_z - castle_width // 2&#10;    wall_z2 = player_z + castle_width // 2&#10;    range_x_castle_ext = range(castle_x_min, castle_x_min + castle_length)&#10;    range_y_castle_ext = range(floor_y, floor_y + castle_height)&#10;    range_z_castle_ext = range(wall_z1, wall_z1 + castle_width)&#10;    range_x_castle_int = range(castle_x_min + 1, castle_x_min + castle_length - 1)&#10;    range_y_castle_int = range(floor_y + 1, floor_y + castle_height)&#10;    range_z_castle_int = range(wall_z1 + 1, wall_z1 + castle_width - 1)&#10;    range_y_window = range(floor_y + 2, floor_y + castle_height)&#10;    range_x_window = range(castle_x_min + 2, castle_x_min + castle_length - 2, 2)&#10;    range_x_roof_ext = range(castle_x_min - 1, castle_x_min + castle_length + 1)&#10;    range_y_roof_ext = range(floor_y + castle_height, floor_y + castle_height + 3)&#10;    range_z_roof_ext = range(wall_z1 - 1, wall_z1 + castle_width + 1)&#10;    range_x_roof_int = range_x_castle_ext&#10;    range_y_roof_int = range(floor_y + castle_height + 1, floor_y + castle_height + 3)&#10;    range_z_roof_int = range_z_castle_ext&#10;    # BUILD&#10;    b.update(nodebuilder.build(range(castle_x_min - 1, castle_x_min + castle_length + 10), range(floor_y + 1, floor_y + 31), range(player_z - 4, player_z + 5), air))&#10;    b.update(nodebuilder.build(range_x_castle_ext, range_y_castle_ext, range_z_castle_ext, castle))&#10;    b.update(nodebuilder.build(range_x_castle_int, range_y_castle_int, range_z_castle_int, air))&#10;    b.update(nodebuilder.build(castle_x_min, [floor_y + 1, floor_y + 2], player_z, air))&#10;    b.update(nodebuilder.build(range_x_window, range_y_window, (wall_z1, wall_z2), window_z))&#10;    b.update(nodebuilder.build(castle_x_min, floor_y + 4, (player_z - 1, player_z, player_z + 1), window_x))&#10;    b.update(nodebuilder.build(range_x_roof_ext, range_y_roof_ext, range_z_roof_ext, castle))&#10;    b.update(nodebuilder.build(range_x_roof_int, range_y_roof_int, range_z_roof_int, air))&#10;    b.update(nodebuilder.build(castle_x_min + castle_length - 2, range(floor_y + 1, floor_y + castle_height + 1), player_z, ladder))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539159002000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Castle&#10;&#10;## Task&#10;To finish off the castle, add a door at the entrance, crenels on the roof&#10;and red carpet under the arches, through the door and to the ladder.&#10;&#10;## Door&#10;Only the bottom half of a door needs to be placed and the top half will automatically&#10;appear. It is important therefore to ensure top space for door is air. Otherwise the door&#10;will not be able to move.&#10;&#10;The name for a wooden door is `&quot;doors:door_wood_a&quot;`.&#10;The `&quot;_a&quot;` at the end means the left door of a pair. If the door ended in&#10;`&quot;_b&quot;` it would be the right door.&#10;&#10;Doors also need a &quot;direction&quot; parameter. The direction is the direction the player is&#10;facing when viewing the door. When a player is viewing the door in that direction the &#10;door will be flush with any wall beside it. Possible directions are &#10;`&quot;+x&quot;, &quot;-x&quot;, &quot;+z&quot;, &quot;-z&quot;`. Experiment with different values to find the door direction&#10;you like the best.&#10;&#10;## Crenels and Merlons&#10;The classic castle design has a square tooth wall protecting soldiers in the castle. The gaps&#10;between the teeth are called crenels and the soldiers can shoot arrows or fling other&#10;projectiles through them. The teeth are called merlons and they protect the soldiers from&#10;the attackers. We currently have a solid wall so need to add crenels for soldiers to &#10;shoot arrows through. The crenels will be in every second position. We can't have a crenel &#10;in the corners because the merlons will obscure them.&#10;&#10;See if you can use `range()` functions to place crenels every second block&#10;on the walls of the roof.&#10;&#10;## Carpet&#10;Red wool will make a fitting carpet for your castle.&#10;&#10;&lt;img src=&quot;crenels.png&quot; width=&quot;100%&quot; /&gt;&lt;br /&gt;&#10;&lt;img src=&quot;red_carpet.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;## Congratulations&#10;When you have finished this task you have finished all the tasks in this course.&#10;&#10;Well done!&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Choose one of the wool colours for the carpet.&lt;/div&gt;&#10;&lt;div class='hint'&gt;The full list of possible colours is white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet&lt;/div&gt;&#10;&lt;div class='hint'&gt;Provide the &lt;code&gt;dict&lt;/code&gt; which specifies a wooden door&lt;/div&gt;&#10;&lt;div class='hint'&gt;The &lt;code&gt;dict&lt;/code&gt; for the wooden door needs two keys, &quot;name&quot; and &quot;direction&quot;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The value of key &quot;name&quot; for the wooden door needs the to be the item name of wooden door&lt;/div&gt;&#10;&lt;div class='hint'&gt;The value of key &quot;direction&quot; for the wooden door needs to be &quot;+x&quot; or &quot;+z&quot; or &quot;-x&quot; or &quot;-z&quot;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The full &lt;code&gt;dict&lt;/code&gt; for the wooden door is &lt;code&gt;{&quot;name&quot;:&quot;doors:door_wood_a&quot;, &quot;direction&quot;:&quot;+x&quot;}&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;crenel_y&lt;/code&gt; needs to be the y value where crenels will be created in wall&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;crenel_y&lt;/code&gt; can be a number or a formula&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;crenel_y&lt;/code&gt; formula can be written in terms of &lt;code&gt;floor_y&lt;/code&gt; and &lt;code&gt;castle_height&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;crenel_y&lt;/code&gt; can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;16&lt;/code&gt;&lt;br&gt;&lt;br&gt;or&lt;br&gt;&#10;&lt;code&gt;floor_y + castle_height + 2&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;roof_x1&lt;/code&gt; needs to be the number or formula for x value at minimum x end of roof&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;roof_x1&lt;/code&gt; formula can be written in terms of castle_x_min&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;roof_x1&lt;/code&gt; should be one block earlier than castle_x_min&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;roof_x1&lt;/code&gt; can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;120&lt;/code&gt;&lt;br&gt;&lt;br&gt;or&lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;castle_x_min - 1&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;roof_z1&lt;/code&gt; needs to be the minimum z value of wall for building crenels&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;roof_z1&lt;/code&gt; needs to be one less than wall_z1&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;roof_z1&lt;/code&gt; can be number or formula&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;roof_z2&lt;/code&gt; needs to be one more than wall_z2&lt;/div&gt;&#10;&lt;div class='hint'&gt;When building crenels at each end of the roof you need to provide the two x values corresponding to the ends of the roof&lt;/div&gt;&#10;&lt;div class='hint'&gt;When laying the red carpet you need to provide the sequence of all the x values where carpet is to be laid&lt;/div&gt;&#10;&lt;div class='hint'&gt;Carpet starts at &lt;code&gt;path_x_min&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Last x value for carpet is same as last x value in &lt;code&gt;range_x_castle_int&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Carpet x values can be &lt;br&gt;&lt;br&gt;&#10;&lt;code&gt;range(105, 129)&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;code&gt;range(path_x_min, castle_x_min + castle_length - 1)&lt;/code&gt;&lt;br&gt;&#10;&lt;br&gt;&#10;or&lt;br&gt;&#10;&lt;br&gt;&#10;a list of numbers!&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="17" />
                      <option name="name" value="Castle" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="505972" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="crenels.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="crenels.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="red_carpet.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="red_carpet.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="1073" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="colour" />
                                      <option name="possibleAnswer" value="red" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="1153" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="dict" />
                                      <option name="possibleAnswer" value="{&quot;name&quot;:&quot;doors:door_wood_a&quot;, &quot;direction&quot;:&quot;+x&quot;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="2748" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="floor_y + castle_height + 2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="2786" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="castle_x_min - 1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="2852" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="wall_z1 - 1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="2874" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="wall_z2 + 1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="3913" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="(roof_x1, roof_x2)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="7" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="4183" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="range(path_x_min, castle_x_min + castle_length - 1)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    path_x_min = 105&#10;    castle_x_min = 121&#10;    floor_y = 9&#10;    # BUILDING SIZE&#10;    castle_length = 9&#10;    castle_width = 5&#10;    castle_height = 5&#10;    # BUILDING MATERIALS&#10;    air = &quot;air&quot;&#10;    castle = &quot;default:stone&quot;&#10;    window_x = {'name':&quot;xpanes:bar_flat&quot;, 'direction':r'\+x'}&#10;    window_z = {'name':&quot;xpanes:bar_flat&quot;, 'direction':r'\+z'}&#10;    ladder = {&quot;name&quot;:&quot;default:ladder_wood&quot;,&quot;direction&quot;:r&quot;\+x&quot;}&#10;    carpet = r&quot;wool:(white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet)&quot;&#10;    door = {&quot;name&quot;:r&quot;doors:door_(wood|glass|obsidian_glass|steel)_\w&quot;, &quot;direction&quot;:r&quot;(\+|\-)(x|z)&quot;}&#10;    torch_n = {&quot;name&quot;:&quot;default:torch_wall&quot;, &quot;direction&quot;:r&quot;\-z&quot;}&#10;    torch_s = {&quot;name&quot;:&quot;default:torch_wall&quot;, &quot;direction&quot;:r&quot;\+z&quot;}&#10;    # ENGINEERING CALCULATIONS&#10;    wall_z1 = player_z - castle_width // 2&#10;    wall_z2 = player_z + castle_width // 2&#10;    range_x_castle_ext = range(castle_x_min, castle_x_min + castle_length)&#10;    range_y_castle_ext = range(floor_y, floor_y + castle_height)&#10;    range_z_castle_ext = range(wall_z1, wall_z1 + castle_width)&#10;    range_x_castle_int = range(castle_x_min + 1, castle_x_min + castle_length - 1)&#10;    range_y_castle_int = range(floor_y + 1, floor_y + castle_height)&#10;    range_z_castle_int = range(wall_z1 + 1, wall_z1 + castle_width - 1)&#10;    range_y_window = range(floor_y + 2, floor_y + castle_height)&#10;    range_x_window = range(castle_x_min + 2, castle_x_min + castle_length - 2, 2)&#10;    range_x_roof_ext = range(castle_x_min - 1, castle_x_min + castle_length + 1)&#10;    range_y_roof_ext = range(floor_y + castle_height, floor_y + castle_height + 3)&#10;    range_z_roof_ext = range(wall_z1 - 1, wall_z1 + castle_width + 1)&#10;    range_x_roof_int = range_x_castle_ext&#10;    range_y_roof_int = range(floor_y + castle_height + 1, floor_y + castle_height + 3)&#10;    range_z_roof_int = range_z_castle_ext&#10;    crenel_y = floor_y + castle_height + 2&#10;    roof_x1 = castle_x_min - 1&#10;    roof_x2 = castle_x_min + castle_length&#10;    roof_z1 = wall_z1 - 1&#10;    roof_z2 = wall_z2 + 1&#10;    # BUILD&#10;    b.update(nodebuilder.build(range(castle_x_min - 1, castle_x_min + castle_length + 10), range(floor_y + 1, floor_y + 31), range(player_z - 4, player_z + 5), air))&#10;    b.update(nodebuilder.build(range_x_castle_ext, range_y_castle_ext, range_z_castle_ext, castle))&#10;    b.update(nodebuilder.build(range_x_castle_int, range_y_castle_int, range_z_castle_int, air))&#10;    b.update(nodebuilder.build(castle_x_min, [floor_y + 1, floor_y + 2], player_z, air))&#10;    b.update(nodebuilder.build(range_x_window, range_y_window, (wall_z1, wall_z2), window_z))&#10;    b.update(nodebuilder.build(castle_x_min, floor_y + 4, (player_z - 1, player_z, player_z + 1), window_x))&#10;    b.update(nodebuilder.build(range_x_roof_ext, range_y_roof_ext, range_z_roof_ext, castle))&#10;    b.update(nodebuilder.build(range_x_roof_int, range_y_roof_int, range_z_roof_int, air))&#10;    b.update(nodebuilder.build(castle_x_min + castle_length - 2, range(floor_y + 1, floor_y + castle_height + 1), player_z, ladder))&#10;    b.update(nodebuilder.build((roof_x1, roof_x2), crenel_y, range(wall_z1, wall_z1 + castle_width, 2), air))&#10;    b.update(nodebuilder.build(range(castle_x_min, castle_x_min + castle_length, 2), crenel_y, (roof_z1, roof_z2), air))&#10;    b.update(nodebuilder.build(castle_x_min, floor_y + 1, player_z, door))&#10;    b.update(nodebuilder.build(range(path_x_min, castle_x_min + castle_length - 1), floor_y, player_z, carpet))&#10;    b.update(nodebuilder.build(range(castle_x_min + 1, castle_x_min + castle_length - 1, 2), floor_y + 3, wall_z1 + 1, torch_n))&#10;    b.update(nodebuilder.build(range(castle_x_min + 1, castle_x_min + castle_length - 1, 2), floor_y + 3, wall_z2 - 1, torch_s))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539159010000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Flag&#10;You have finished the course, but you now you get to build a flag on your castle using&#10;    your own design.&#10;&#10;## Task&#10;Build a flag pole and at the top of the flag pole put a flag of your own design.&#10;&#10;## Size&#10;Set the values of variables `flag_height` and `flag_width`.&#10;`flag_height` is the  height of the flag measured from the top&#10;of the flag pole to the top of the flag. `flag_width` is measured from&#10;the flag_pole in the x direction. Try to keep them within 21 x 21 blocks.&#10;&#10;## Colours&#10;Put all the colours you want to use in the `list` variable `colours`.&#10;&#10;    colours = [&quot;wool:green&quot;, &quot;wool:blue&quot;]  # to use the two colours green and blue.&#10;&#10;Python has a feature called &quot;list comprehension&quot; which makes it easier to create longer lists.&#10;Look it up if you want to find out more about it. Here is an example that creates a list containing&#10;all 15 colours of wool.&#10;&#10;    colours = [&quot;wool:&quot; + colour for colour in &quot;white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet&quot;.split(&quot;|&quot;)]&#10;&#10;## Stripe width&#10;If you are using more than one colour you can set the `stripe_width` to be used in the flag pattern.&#10;&#10;## Pattern&#10;The next step is to choose the pattern you want for your flag. Here are some examples.&#10;&#10;### Single colour&#10;&#10;    c = 0&#10;&#10;### Vertical stripes&#10;&#10;    c = x // stripe_width % num_colours&#10;&#10;### Horizontal stripes&#10;&#10;    c = y // stripe_width % num_colours&#10;&#10;### Diagonal stripes&#10;&#10;    c = (x + y) // stripe_width % num_colours&#10;&#10;or for the other diagonal&#10;&#10;    c = (x - y) // stripe_width % num_colours&#10;&#10;### Cross centred on centre of flag&#10;&#10;    cx = pole_x + flag_length / 2&#10;    cy = flag_y + flag_height / 2&#10;    c = int(min(abs(x-cx), abs(y-cy))) // stripe_width % num_colours&#10;&#10;&#10;### Squares centred on centre of flag&#10;&#10;    cx = pole_x + flag_length / 2&#10;    cy = flag_y + flag_height / 2&#10;    c = int(max(abs(x-cx), abs(y-cy))) // stripe_width % num_colours&#10;&#10;### Circles centred on front bottom corner of flag&#10;&#10;    cx = pole_x&#10;    cy = flag_y&#10;    c = int(math.sqrt((x-cx)**2 + (y-cy)**2) ) // stripe_width % num_colours&#10;&#10;## Flag shape&#10;&#10;The shape of the flag can be defined in a function. This program contains&#10;three functions and you can choose one of them to define your flag shape.&#10;For the very advanced, try creating your own function.&#10;&#10;### Rectangle&#10;&#10;    if rectangle_flag(x, y):&#10;&#10;### Triangle with full length at top of flag pole&#10;&#10;    if triangle_top_flag(x, y):&#10;&#10;### Half ellipse&#10;&#10;    if half_ellipse_flag(x, y):&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="18" />
                      <option name="name" value="Flag" />
                      <option name="status" value="Failed" />
                      <option name="stepId" value="505973" />
                      <option name="stepikChangeStatus" value="Info and Content changed" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from unittest import mock&#10;from triptera_pe_tests import mock_send_building, mock_create&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    # test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1539159015000" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="154345" />
              </Lesson>
            </list>
          </option>
        </RemoteCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>