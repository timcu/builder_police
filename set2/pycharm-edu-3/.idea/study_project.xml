<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="StudySettings">
    <StudyTaskManager>
      <option name="VERSION" value="11" />
      <option name="myUserTests">
        <map />
      </option>
      <option name="course">
        <RemoteCourse>
          <option name="additionalMaterialsUpdateDate" value="0" />
          <option name="authors">
            <list>
              <StepikUserInfo>
                <option name="firstName" value="D" />
                <option name="guest" value="false" />
                <option name="id" value="39599470" />
                <option name="lastName" value="Tim Cummings" />
              </StepikUserInfo>
            </list>
          </option>
          <option name="compatible" value="true" />
          <option name="courseMode" value="Course Creator" />
          <option name="courseType" value="PyCharm" />
          <option name="customPresentableName" />
          <option name="description" value="Teaches more advanced python concepts using a virtual world in minetest. This course can use the free online minetest server at demo.pythonator.com:30000. This is the third course in stream b of pythonator series.&#10;&#10;https://pythonator.com&#10;&#10;Requires PyCharm Edu 2018.3 or later" />
          <option name="fromZip" value="false" />
          <option name="id" value="51072" />
          <option name="index" value="-1" />
          <option name="instructors">
            <list>
              <option value="39599470" />
            </list>
          </option>
          <option name="language" value="Python" />
          <option name="languageCode" value="en" />
          <option name="loadSolutions" value="true" />
          <option name="name" value="pythonator b3 advanced" />
          <option name="public" value="false" />
          <option name="sectionIds">
            <list>
              <option value="75312" />
            </list>
          </option>
          <option name="stepikChangeStatus" value="Up to date" />
          <option name="type" value="pycharm8 Python" />
          <option name="updateDate" value="1545917717000" />
          <option name="items">
            <list>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="199317" />
                <option name="index" value="1" />
                <option name="name" value="Minetest 1 - Building" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1545893889000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Minetest setup&#10;&#10;1.  The first step is to play Minetest :). Play online and connect to a Pythonator server.&#10;    You can even connect to the free server at `demo.pythonator.com` using port `30000`.&#10;    Use a name and password of your choosing, and as long as no-one else has chosen that&#10;    name you will be able to login.&#10;2.  Please don't use spaces in your name or password. If you need to change your password in&#10;    Minetest press the [esc] key and click the [Change password] button.&#10;3.  Don't use a password you want keep secret because there is very low security on this&#10;    server and other people can find out your password. I don't mind if your password&#10;    is just &quot;*password*&quot; but be prepared for others to login as you if you&#10;    do that.&#10;4.  Check if you have the `irc_builder` privilege by typing&#10;    `/privs` in Minetest chat. It should be automatic but if not ask&#10;    the Minetest op for that privilege.&#10;5.  Fill in your connection details to Minetest in the program on the left.&#10;    * Enter your name as mtuser (mtuser=&quot;myname&quot;)&#10;    * Enter your password as mtuserpass (mtuserpass=&quot;mysecret&quot;)&#10;    * Find your z value from the sign in Minetest with your name in it. Every player gets a unique value.&#10;    * Server details default for the &lt;code&gt;demo.pythonator.com&lt;/code&gt; server. For other servers ask your Minetest op.&#10;6.  Click the [Check] button below.&#10;7.  When you have completed this setup correctly you will see &quot;Congratulations!&quot;.&#10;    Click the [Next] button to move to the first task.&#10;&#10;Here is an example of how to fill in the details for LAN servers at CoderDojo.&#10;&#10;    mtuser = &quot;tim&quot;                # your minetest username&#10;    mtuserpass = &quot;not_so_secret&quot;  # your minetest password. This file is not encrypted so don't use anything you want kept secret&#10;    player_z = 10                 # your z value from sign in minetest with your username on it&#10;&#10;    # The following must match your settings in minetest server &gt; Settings &gt; Advanced Settings &gt; Mods &gt; irc &gt; Basic &gt;&#10;    ircserver = &quot;192.168.17.100&quot;  # same as IRC server&#10;    mtbotnick = &quot;mtserver&quot;        # same as Bot nickname&#10;    channel = &quot;#coderdojo&quot;        # same as Channel to join&#10;&#10;&lt;div class='hint'&gt;&#10;In Minetest, find the sign with your name and your player_z will be the z value on that sign.&#10;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Sign will look like the following:&lt;br&gt;&#10;&lt;br&gt;&#10;&lt;div align=&quot;center&quot;&gt;tim&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;x=100&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;y=14&lt;/div&gt;&#10;&lt;div align=&quot;center&quot;&gt;z=10&lt;/div&gt;&#10;&lt;br&gt;&#10;In this case use &lt;code&gt;player_z = 10&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;ircserver can be a host name (eg &quot;irc.triptera.com.au&quot;) or ip address (&quot;192.168.17.100&quot;) of the chat server. &lt;/div&gt;&#10;&lt;div class='hint'&gt;Channel names start with ## if it is not a permanent channel, or # for a permanent channel&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Set up Minetest" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="578029" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="10" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="username" />
                                      <option name="possibleAnswer" value="username" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="60" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="password" />
                                      <option name="possibleAnswer" value="password" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="178" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="0" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="# TODO: type solution here&#10;" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from ircbuilder import MinetestConnection&#10;import os.path&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;def test_config():&#10;    # Stepik changes directory structure so check first which directory structure&#10;    config_path = &quot;../../minetest_irc.py&quot;&#10;    if not os.path.exists(config_path):&#10;        if os.path.exists(&quot;../&quot; + config_path):&#10;            config_path = &quot;../&quot; + config_path&#10;    from task import mtuser, mtuserpass, mtbotnick, ircserver, channel, player_z&#10;    file = open(config_path, &quot;w&quot;)&#10;    file.write('mtuser = &quot;' + mtuser + '&quot;       # your minetest username\n')&#10;    file.write('mtuserpass = &quot;' + mtuserpass + '&quot;   # your minetest password. This file is not encrypted so don\'t use anything you want kept secret\n')&#10;    file.write('player_z = ' + str(player_z) + '  # your z value from sign in minetest with your username on it\n')&#10;    file.write('\n')&#10;    file.write('# The following must match your settings in minetest server &gt; Settings &gt; Advanced Settings &gt; Mods &gt; irc &gt; Basic &gt;\n')&#10;    file.write('ircserver = &quot;' + ircserver + '&quot;   # same as IRC server\n')&#10;    file.write('mtbotnick = &quot;' + mtbotnick + '&quot;   # same as Bot nickname\n')&#10;    file.write('channel = &quot;' + channel + '&quot;     # same as Channel to join\n')&#10;    file.close()&#10;    mc = MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel)&#10;    z = mc.send_cmd('get_player_z ' + mtuser)&#10;    try:&#10;        if int(z)!=player_z:&#10;            failed(&quot;Your player_z should be &quot; + z + &quot;, not &quot; + str(player_z))&#10;            return False&#10;    except TypeError:&#10;        failed(&quot;Didn't get an int for player_z. Instead got &quot; + str(z) + &quot; which has type &quot; + str(type(z)))&#10;        return False&#10;    except ValueError:&#10;        failed(&quot;Didn't get an int for player_z. Instead got &quot; + str(z) + &quot; which has type &quot; + str(type(z)))&#10;        return False&#10;    passed()&#10;    return True&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_common_tests()&#10;    test_config()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545873727000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 6 - Chequered square&#10;&#10;You should have completed &quot;pythonator b2 easy&quot; course before commencing this course.&#10;In the Minetest world your next task is described on your sign.&#10;&#10;## Task&#10;&#10;Construct a vertical square shape of alternating wool colours in the sky with height of 9 blocks.&#10;Vertical stripes is an acceptable answer. However, a chequerboard pattern is the complete solution.&#10;All blocks in the square will have the same `z` value.&#10;&#10;This course is more advanced than the &quot;pythonator b2 easy&quot; so&#10;you can no longer just type in numbers when the question asks for a variable or formula.&#10;&#10;## Lesson&#10;&#10;Because the colours are alternating you can't set them all in one `build` command.&#10;&#10;The first challenge will be to work out where to start building the square. Try drawing the square&#10;as a grid on a piece of paper and labelling the x and y coordinates of each grid location. The height and width are odd&#10;numbers which is important if you want a single block to be the centre.&#10;&#10;We will specify the range of `x` values using `range(x1, x2)`. Therefore `x1` will be the `x` coordinate of one end&#10;of the square and `x2` will be the `x` coordinate one past the opposite end of the square.&#10;Similarly the range of `y` values will be specified using `range(y1, y2)`.&#10;The image below shows the coordinates of the corners of the square in terms of x1, x2, y1 and y2.&#10;&#10;Here are the formulae for x1 and x2 in pseudocode. See if you can convert them to Python.&#10;&#10;x1 = x at the centre minus (half the width of the square rounded down to nearest integer)&#10;x2 = x1 plus the width of the square&#10;&#10;The advantage of using a formula based on centre position and width is that if your requirements change then you&#10;can easily build new squares just by providing a new cx, cy and width/height and not changing any other part of the program.&#10;&#10;The second challenge is how to specify a different wool colour each&#10;time a node is set. There are several ways to do this and each one is correct.&#10;One solution can be achieved in one command. Use the hints to see if you can work it out.&#10;&#10;&lt;img src=&quot;chequered_square.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;For &lt;code&gt;colour0&lt;/code&gt; and &lt;code&gt;colour1&lt;/code&gt; choose one of the 16 wool colours&#10;white, grey, dark_grey, black, blue, cyan, green, dark_green, yellow, orange,&#10;brown, red, pink, magenta or violet&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;colour1&lt;/code&gt; has to be different to &lt;code&gt;colour0&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Width of square is measured in blocks.&lt;/div&gt;&#10;&lt;div class='hint'&gt;Height of square is always the same as the width for a square.&lt;/div&gt;&#10;&lt;div class='hint'&gt;Calculate &lt;code&gt;x1&lt;/code&gt; using a formula based on &lt;code&gt;cx&lt;/code&gt; and &lt;code&gt;width&lt;/code&gt; which results in the minimum &lt;code&gt;x&lt;/code&gt; value for constructing the square&lt;/div&gt;&#10;&lt;div class='hint'&gt;x1 should be an &lt;code&gt;int&lt;/code&gt;. &lt;/div&gt;&#10;&lt;div class='hint'&gt;For x1 use integer division when finding half the width ( width // 2 ) so that result will be an int&lt;/div&gt;&#10;&lt;div class='hint'&gt;Calculate &lt;code&gt;y1&lt;/code&gt; using a formula based on &lt;code&gt;cy&lt;/code&gt; and &lt;code&gt;height&lt;/code&gt; which results in the minimum &lt;code&gt;y&lt;/code&gt; value for constructing the square&lt;/div&gt;&#10;&lt;div class='hint'&gt;&#10;&lt;code&gt;range(stop)               # iterates from 0 to ('stop'-1) counting up in ones&lt;/code&gt;&lt;br /&gt;&#10;&lt;code&gt;range(start, stop)        # iterates from 'start' to ('stop'-1) counting up in ones&lt;/code&gt;&lt;br /&gt;&#10;&lt;code&gt;range(start, stop, step)  # iterates from 'start' to but not including 'stop' counting in 'step's&lt;/code&gt;&lt;br /&gt;&#10;&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;When setting &lt;code&gt;colour&lt;/code&gt;, adjacent blocks (x differs by one) with the same value of y must have different colours&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;div&gt;colours[0] will use one colour&lt;/div&gt;&#10;&lt;div&gt;colours[1] will use the other colour&lt;/div&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;p&gt;Statement setting &lt;code&gt;colour&lt;/code&gt; will look like&lt;/p&gt;&#10;&lt;p&gt;colour = colours['formula']&lt;/p&gt;&#10;&lt;p&gt;But you need to replace 'formula' with a formula or variable which returns a 0 or 1 depending in which colour you want &lt;/p&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Choose different colours using modulo arithmetic&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;p&gt;The modulo operator is %. It gives the remainder after dividing. &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;5 % 2 = 1&#10;6 % 2 = 0&#10;7 % 2 = 1&lt;/code&gt;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;p&gt;Using modulo operator in a &lt;code&gt;for&lt;/code&gt; loop. &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;x % 2 = 1  # when x == 5&#10;x % 2 = 0  # when x == 6&#10;x % 2 = 1  # when x == 7&lt;/code&gt;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;p&gt;Using modulo operator in a &lt;code&gt;for&lt;/code&gt; loop with two variables. &lt;/p&gt;&#10;&lt;pre&gt;&lt;code&gt;(x + y) % 2 = 1  # when x == 5 and y == 4&#10;(x + y) % 2 = 0  # when x == 6 and y == 4&#10;(x + y) % 2 = 1  # when x == 7 and y == 4&#10;&lt;/code&gt;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Chequered square" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="578030" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="chequered_square.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="chequered_square.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="343" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="colour" />
                                      <option name="possibleAnswer" value="green" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="366" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="colour" />
                                      <option name="possibleAnswer" value="blue" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="440" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="9" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="451" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="9" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="458" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="cx - width // 2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="479" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="cy - height // 2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="584" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="parameters" />
                                      <option name="possibleAnswer" value="y1, y2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="7" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="10" />
                                      <option name="offset" value="612" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="parameters" />
                                      <option name="possibleAnswer" value="x1, x2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="8" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="638" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="colours[(y + x) % 2]" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from ircbuilder import MinetestConnection, NICK_MAX_LEN, nodebuilder&#10;from minetest_irc import ircserver, mtuser, mtuserpass, mtbotnick, channel, player_z&#10;from triptera_pe_tests import test_eval, test_string, test_minetest, test_eval_phi, test_string_in, mock_create, mock_send_building, test_building_with_pattern&#10;import pref&#10;from unittest import mock&#10;&#10;cx = pref.x&#10;cy = pref.y + 18&#10;z = player_z&#10;width = 9&#10;height = 9&#10;x1 = cx - width // 2&#10;y1 = cy - height // 2&#10;x2 = x1 + width&#10;y2 = y1 + height&#10;&#10;&#10;def test_nodes():&#10;    placeholders = get_answer_placeholders()&#10;    wool0 = &quot;wool:&quot; + placeholders[0]&#10;    wool1 = &quot;wool:&quot; + placeholders[1]&#10;    pybotnick = &quot;pt&quot; + mtuser&#10;    if len(pybotnick) &gt; NICK_MAX_LEN:&#10;        pybotnick = pybotnick[0:NICK_MAX_LEN]&#10;    mc = MinetestConnection.create(ircserver, mtuser, mtuserpass, mtbotnick, channel, pybotnick=pybotnick)&#10;    # floor&#10;    count_0 = 81 - int(mc.compare_nodes(cx-4, cy-4, z, cx+4, cy+4, z, wool0))&#10;    count_1 = 81 - int(mc.compare_nodes(cx-4, cy-4, z, cx+4, cy+4, z, wool1))&#10;    if count_0 &gt; 45:&#10;        failed(&quot;Too many &quot; + wool0 + &quot;. Should be less than 46 but are &quot; + count_0)&#10;    elif count_1 &gt; 45:&#10;        failed(&quot;Too many &quot; + wool1 + &quot;. Should be less than 46 but are &quot; + count_1)&#10;    elif count_0 &lt; 36:&#10;        failed(&quot;Too few &quot; + wool0 + &quot;. Should be at least 36 but are &quot; + count_0)&#10;    elif count_1 &lt; 36:&#10;        failed(&quot;Too few &quot; + wool1 + &quot;. Should be at least 36 but are &quot; + count_1)&#10;    else:&#10;        passed()&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    # position of centre of square&#10;    wool = r&quot;wool:(white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet)&quot;&#10;    b.update(nodebuilder.build(range(x1,x2), range(y1,y2), z, wool))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    tbwp = test_building_with_pattern(mc, building_pattern)&#10;    if not tbwp:&#10;        return False&#10;    building_guess = mc.building&#10;    for y in range(y1, y1 + height):&#10;        prev_xyz = (x1, y, z)&#10;        prev = building_guess[prev_xyz]&#10;        for x in range(x1 + 1, x1 + width):&#10;            xyz = (x, y, z)&#10;            if prev == building_guess[xyz]:&#10;                failed(&quot;Blocks at &quot; + str(xyz) + &quot; and &quot; + str(prev_xyz) + &quot; are both &quot; + str(prev))&#10;                return False&#10;            prev = building_guess[xyz]&#10;            prev_xyz = (x, y, z)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    list_wool = [&quot;white&quot;, &quot;grey&quot;, &quot;dark_grey&quot;, &quot;black&quot;, &quot;blue&quot;, &quot;cyan&quot;, &quot;green&quot;, &quot;dark_green&quot;, &quot;yellow&quot;, &quot;orange&quot;, &quot;brown&quot;, &quot;red&quot;, &quot;pink&quot;, &quot;magenta&quot;, &quot;violet&quot;]&#10;    if not test_string_in(placeholders, 0, list_wool): return False&#10;    if not test_string_in(placeholders, 1, list_wool): return False&#10;    if not test_string(placeholders, 2, '9'): return False&#10;    if not test_string(placeholders, 3, '9'): return False&#10;    if not test_eval(placeholders, 4, 'cx - width // 2', [{'cx':100, 'width':9}, {'cx':110, 'width':21}] ): return False&#10;    if not test_eval(placeholders, 5, 'cy - height // 2', [{'cy':14, 'height':9}, {'cy':15, 'height':21}] ): return False&#10;    list_var = [x.strip() for x in placeholders[6].strip().split(&quot;,&quot;)]&#10;    if len(list_var) != 2 and len(list_var) != 3:&#10;        failed(&quot;Wrong number of arguments in answer 7. Should be 2 (or 3). You have &quot; + str(len(list_var))) + str(list_var)&#10;        return False&#10;    if not test_eval_phi(list_var[0], &quot;First argument in answer 7&quot; , 'y1', [{'y1':28}, {'y1':36}] ): return False&#10;    if not test_eval_phi(list_var[1], &quot;Second argument in answer 7&quot;, 'y2', [{'y2':28}, {'y2':36}] ): return False&#10;    list_var = [x.strip() for x in placeholders[7].strip().split(&quot;,&quot;)]&#10;    if len(list_var) != 2 and len(list_var) != 3:&#10;        failed(&quot;Wrong number of arguments in answer 8. Should be 2 (or 3). You have &quot; + str(len(list_var)))&#10;        return False&#10;    if not test_eval_phi(list_var[0], &quot;First argument in answer 8&quot; , 'x1', [{'x1':96}, {'x1':104}] ): return False&#10;    if not test_eval_phi(list_var[1], &quot;Second argument in answer 8&quot;, 'x2', [{'x2':96}, {'x2':104}] ): return False&#10;    # Can't test 8 because may have formula over several lines&#10;    #if not test_formula(placeholders, 6, 'colours[(y+x)%2]')&#10;    passed()&#10;    return True&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    if test_answer_placeholders():&#10;        run_common_tests()&#10;        test_building()&#10;        #test_nodes()&#10;        #test_minetest(6)&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545873730000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 7 - Chequered diamond&#10;&#10;Have you tried the Minetest in-game quiz? In Minetest, type&#10;&#10;        \quiz&#10;&#10;Then go down the tunnel where you found Task 4 and look for a side tunnel.&#10;&#10;Task 7 is on your sign in the Minetest world and is a more challenging variation on the chequered square.&#10;&#10;Complete this task or 5 questions in the quiz and you will get the 'fast' privilege.&#10;&#10;## Task&#10;&#10;Construct a vertical diamond shape of alternating wool colours in the sky with a width and&#10;height of 21 blocks. All blocks to have the same `z` value.&#10;&#10;## Lesson&#10;&#10;Most of the code is similar to the chequered square. This challenge is to come up with formulae for xlo and yhi,&#10;the low and high values of x where you want to place blocks on each row. And remember, the hints can be your friend.&#10;&#10;&lt;img src=&quot;chequered_diamond.png&quot; width=&quot;100%&quot;&gt;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Choose any two colours from white, grey, dark_grey, black, blue, cyan, green, dark_green, yellow, orange, brown, red, pink, magenta, violet&lt;/div&gt;&#10;&lt;div class='hint'&gt;Width and height of diamond is measured in blocks&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;xlo&lt;/code&gt; is the starting value of &lt;code&gt;x&lt;/code&gt; for each value of &lt;code&gt;y&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Formula for &lt;code&gt;xlo&lt;/code&gt; can be written in terms of &lt;code&gt;x1&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;cy&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;If you can't create a single formula, try writing two formulae on paper first. One for y &amp;le; cy and one for y &amp;gt; cy. &lt;/div&gt;&#10;&lt;div class='hint'&gt;It is possible to combine the two formulae for xlo into one using the abs() function which returns the absolute value of a number. The absolute value of negative numbers is the same number but made positive. The absolute value of positive numbers is the same number.&#10;&lt;pre&gt;&lt;code&gt;    abs(5) = 5&#10;    abs(-3) = 3&lt;/code&gt;&lt;/pre&gt;&#10;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;xhi&lt;/code&gt; is the maximum value of &lt;code&gt;x&lt;/code&gt; in the diamond for a given &lt;code&gt;y&lt;/code&gt; value&lt;/div&gt;&#10;&lt;div class='hint'&gt;Formula for &lt;code&gt;xhi&lt;/code&gt; can be written in terms of &lt;code&gt;x2&lt;/code&gt;, &lt;code&gt;y&lt;/code&gt;, &lt;code&gt;cy&lt;/code&gt;&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Chequered diamond" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="578031" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="chequered_diamond.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="chequered_diamond.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="5" />
                                      <option name="offset" value="346" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="white" />
                                      <option name="possibleAnswer" value="white" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="360" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="orange" />
                                      <option name="possibleAnswer" value="orange" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="409" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="21" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="421" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="21" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="683" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="x1 + abs(y - cy)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="710" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="x2 - abs(y - cy)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    ref_z = player_z&#10;    wool = r&quot;wool:(white|grey|dark_grey|black|blue|cyan|green|dark_green|yellow|orange|brown|red|pink|magenta|violet)&quot;&#10;    # position of centre of diamond&#10;    cx = 100&#10;    cy = 32&#10;    z = player_z&#10;&#10;    # array of node types which we will alternate through&#10;    colours = [wool, wool]&#10;&#10;    # calculate extents of diamond&#10;    width = 21&#10;    height = 21&#10;    x1 = cx - width // 2&#10;    y1 = cy - height // 2&#10;    x2 = x1 + width&#10;    y2 = y1 + height&#10;    b = nodebuilder.build(range(x1,x2),range(y1,y2),ref_z,&quot;air&quot;)&#10;    for y in range(y1,y2):&#10;        # calculate x range which will give diamond shape&#10;        xlo = x1 + abs(y - cy)&#10;        xhi = x2 - abs(y - cy)&#10;        for x in range(xlo,xhi):&#10;            # set each node to an alternate wool colour by adding position to node list&#10;            b.update(nodebuilder.build(x, y, z, colours[(x+y)%2]))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    success = test_building_with_pattern(mc, building_pattern)&#10;    if not success:&#10;        return False&#10;    # Check no adjacent blocks the same&#10;    keys=sorted(mc.building.keys())&#10;    key_prev=(-100, -100, -100)&#10;    wool_prev = &quot;&quot;&#10;    for key in keys:&#10;        wool = mc.building[key]&#10;        if wool == wool_prev and abs(key[0]-key_prev[0]) &lt; 2 and abs(key[1]-key_prev[1]) &lt; 2:&#10;            # adjacent the same so fail&#10;            failed(&quot;Blocks at &quot; + str(key_prev) + &quot; and &quot; + str(key) + &quot; are adjacent but are both &quot; + str(wool))&#10;            return False&#10;    return True&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545873733000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 8 - Sloping tunnel&#10;&#10;Now we are going to continue building the tunnel from task 5 sending it deep underground.&#10;You will find your next task in a chest at the end of the task 5 tunnel.&#10;&#10;## Task&#10;&#10;Continue glass tunnel down on a diagonal. The centre of the&#10;tunnel floor will go from x1=69, y1=14 to x2=9, y2=46.&#10;&#10;## Lesson&#10;&#10;To ensure no lava or water leak into tunnel, build the&#10;full tunnel in glass first and then hollow it out with air.&#10;By never having an open end, water and lava can't flow in.&#10;&#10;To create a sloping tunnel you have to build it in&#10;segments. You build a new segment for each value of x.&#10;The image below shows three segments several blocks apart.&#10;&#10;&lt;img src=&quot;tunnel_segments_separate.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;If you build segments for each value of x then the segments are&#10;joined and you have a continuous tunnel.&#10;&#10;&lt;img src=&quot;tunnel_segments_joined.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;num_segments&lt;/code&gt; needs a formula in terms of x1 and x2 which returns the number of segments in the tunnel.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;num_segments&lt;/code&gt; is the number of different values of x&lt;/div&gt;&#10;&lt;div class='hint'&gt;Example value of &lt;code&gt;num_segments&lt;/code&gt;: If x1 = 7 and x2 = 5 then there will be 3 values of x (7, 6, 5) even though x1 - x2 = 2. &lt;/div&gt;&#10;&lt;div class='hint'&gt;The variable &lt;code&gt;x&lt;/code&gt; in the &lt;code&gt;for&lt;/code&gt; loop is the x position of&#10;tunnel segment as a formula in terms of x1 and i&lt;/div&gt;&#10;&lt;div class='hint'&gt;When i = 0, x = 69 ( = x1)&lt;/div&gt;&#10;&lt;div class='hint'&gt;When i = 1, x = 68 ( = x1 - 1)&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;div&gt;When i = 2, x = x1 - 2&lt;/div&gt;&#10;&lt;div&gt;When i = 3, x = x1 - 3&lt;/div&gt;&#10;&lt;div&gt;When i = 4, x = x1 - 4&lt;/div&gt;&#10;&lt;div&gt;...&lt;/div&gt;&#10;&lt;div&gt;Find the pattern to work out the formula.&lt;/div&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The variable &lt;code&gt;y&lt;/code&gt; in the &lt;code&gt;for&lt;/code&gt; loop is the y position of tunnel segment floor in terms of y1 and i&lt;/div&gt;&#10;&lt;div class='hint'&gt;&#10;&lt;div&gt;When i = 0, y = y1&lt;/div&gt;&#10;&lt;div&gt;When i = 1, y = y1 - 1&lt;/div&gt;&#10;&lt;div&gt;When i = 2, y = y1 - 2&lt;/div&gt;&#10;&lt;div&gt;When i = 3, y = y1 - 3&lt;/div&gt;&#10;&lt;div&gt;When i = 4, y = y1 - 4&lt;/div&gt;&#10;&lt;div&gt;Find the pattern to work out the formula.&lt;/div&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The variable &lt;code&gt;z&lt;/code&gt; in the &lt;code&gt;for&lt;/code&gt; loop is the z position of corner of tunnel segment in terms of &lt;code&gt;ref_z&lt;/code&gt; and &lt;code&gt;tunnel_width&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;ref_z&lt;/code&gt; is centre of tunnel so &lt;code&gt;z&lt;/code&gt; will be half the tunnel width less than &lt;code&gt;ref_z&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_y_ext range()&lt;/code&gt; stop value needs a formula in terms of &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;tunnel_height&lt;/code&gt; which returns one more than the highest value of &lt;code&gt;y&lt;/code&gt; for glass in this tunnel at position &lt;code&gt;i&lt;/code&gt;.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_z_ext range()&lt;/code&gt; stop value needs a formula in terms of &lt;code&gt;z&lt;/code&gt; and &lt;code&gt;tunnel_width&lt;/code&gt; which returns one more than the highest value of &lt;code&gt;z&lt;/code&gt; of the glass in the tunnel.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_z_floor&lt;/code&gt; can be a tuple of numbers &lt;code&gt;(0, 1, 2, 3)&lt;/code&gt;, a list of numbers &lt;code&gt;[0, 1, 2, 3]&lt;/code&gt;, or a range of numbers &lt;code&gt;range(4)&lt;/code&gt;.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_z_floor range()&lt;/code&gt; sequence needs to provide all the values of z for the stone floor.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_z_floor range()&lt;/code&gt; should return 3 values&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_z_floor range()&lt;/code&gt; sequence numbers can be as formulae in terms of z or ref_z, or just as numbers&lt;/div&gt;&#10;&lt;div class='hint'&gt;Formulae for &lt;code&gt;x, y, z&lt;/code&gt; in the second &lt;code&gt;for&lt;/code&gt; loop are same as the formulae in the first &lt;code&gt;for&lt;/code&gt; loop.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_y_air range()&lt;/code&gt; stop value needs a formula in terms of &lt;code&gt;y&lt;/code&gt; and &lt;code&gt;tunnel_height&lt;/code&gt; which is one more than the vertical position of the highest air block in segment &lt;code&gt;i&lt;/code&gt; of the tunnel.&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;range_z_air&lt;/code&gt; is the same as &lt;code&gt;range_z_floor&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The &lt;code&gt;if&lt;/code&gt; statement needs a condition that is only &lt;code&gt;True&lt;/code&gt; for every fourth value of &lt;code&gt;i&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Use modulo operator &lt;code&gt;%&lt;/code&gt; on &lt;code&gt;i&lt;/code&gt; to check for every fourth value of &lt;code&gt;i&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The boolean expression (condition) &lt;code&gt;i % 4 == 0&lt;/code&gt; returns &lt;code&gt;True&lt;/code&gt; for every fourth value of &lt;code&gt;i&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;When placing a torch the &lt;code&gt;y&lt;/code&gt; value needs to be that of one block above floor at position &lt;code&gt;i&lt;/code&gt; of tunnel in terms of &lt;code&gt;y&lt;/code&gt;&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Sloping tunnel" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="578032" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="396" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="x1 - x2 + 1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="723" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="x1 - i" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="738" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="y1 - i" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="753" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="ref_z - tunnel_width // 2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="882" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="y + tunnel_height" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="928" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="z + tunnel_width" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1073" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="(z + 1, z + 2, z + 3)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="7" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="1304" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="x1 - i" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="8" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="1319" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="y1 - i" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="9" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="1334" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="ref_z - tunnel_width // 2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="10" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="1391" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="y + tunnel_height - 1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="11" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="1432" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="sequence" />
                                      <option name="possibleAnswer" value="(z + 1, z + 2, z + 3)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="12" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="1508" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="condition" />
                                      <option name="possibleAnswer" value="i % 4 == 0" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="13" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="1603" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="y + 1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tunnel_segments_joined.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tunnel_segments_joined.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="tunnel_segments_separate.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="tunnel_segments_separate.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018 - 2019&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    # Location of end points of sloping section of tunnel (centre of floor)&#10;    x1 = 69&#10;    y1 = 14&#10;    x2 = 9&#10;    ref_z = player_z&#10;&#10;    # Dimensions&#10;    tunnel_height = 7&#10;    tunnel_width = 5&#10;    num_segments = x1 - x2 + 1&#10;&#10;    # Building materials&#10;    glass = &quot;default:glass&quot;&#10;    floor = &quot;default:stone&quot;&#10;    torch = &quot;default:torch&quot;&#10;    air = &quot;air&quot;&#10;&#10;    # Make the full tunnel in solid glass and stone first&#10;    for i in range(num_segments):&#10;        # Cross section of tunnel at position i&#10;        # x, y, z are coordinates of lower left corner of segment of tunnel&#10;        x = x1 - i&#10;        y = y1 - i&#10;        z = ref_z - tunnel_width // 2&#10;        # Build 5 x 7 blocks of glass at position i for walls, roof, and centre&#10;        range_y_ext = range(y, y + tunnel_height)&#10;        range_z_ext = range(z, z + tunnel_width)&#10;        b.update(nodebuilder.build(x, range_y_ext, range_z_ext, glass))&#10;        # Build 3 x 1 blocks of stone at position i for floor&#10;        range_z_floor = (z + 1, z + 2, z + 3)&#10;        b.update(nodebuilder.build(x, y, range_z_floor, floor))&#10;    # hollow out the tunnel because now we are sure that lava and water can't flow in the ends&#10;    for i in range(num_segments):&#10;        # Use air to hollow out the tunnel&#10;        x = x1 - i&#10;        y = y1 - i&#10;        z = ref_z - tunnel_width // 2&#10;        range_y_air = range(y + 1, y + tunnel_height - 1)&#10;        range_z_air = (z + 1, z + 2, z + 3)&#10;        b.update(nodebuilder.build(x, range_y_air, range_z_air, air))&#10;        if i % 4 == 0:&#10;            # Place torches down the right hand side of the tunnel&#10;            b.update(nodebuilder.build(x, y + 1, ref_z + 1, torch))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    placeholder = placeholders[0]&#10;    if placeholder == &quot;&quot;:       # TODO: your condition here&#10;        passed()&#10;    else:&#10;        failed()&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    # test_answer_placeholders()       # TODO: uncomment test call&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545879457000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Task 9 - Stairs and rail&#10;&#10;Look in the chest at the bottom of the task 8 tunnel to find instructions for task 9.&#10;&#10;## Task&#10;&#10;Put rail and powered rail along centre of your tunnel.&#10;Where the tunnel is sloping, place stairs down the left side.&#10;Where the tunnel is flat we don't need so much power&#10;rail. Use two pieces of rail followed by two pieces of&#10;power rail, and keep alternating two at a time.&#10;&#10;## Lesson&#10;&#10;This task introduces some new materials. Every material has a name. The name is of&#10;type `str` (string) which is made up of&#10;&#10;        &quot;mod_name:material_name_in_mod&quot;&#10;&#10;For example, `&quot;default:stone&quot;` is from the `&quot;default&quot;` mod and has a material name in that mod of `&quot;stone&quot;`.&#10;Similarly, `&quot;wool:red&quot;` is from the `&quot;wool&quot;` mod and has a material name in that mod of `&quot;red&quot;`.&#10;&#10;For this task we will use two materials from the `&quot;carts&quot;` mod.&#10;&#10;We will also use a material from the `&quot;stairs&quot;` mod, `&quot;stair_stonebrick&quot;`. When we build with stairs&#10;we need to specify the material and the direction the stairs will be facing. To specify extra&#10;information we use a `dict` (dictionary) rather than a `str` (string). `dict`s are defined using several&#10;key: value pairs. The keys to use for stairs in this task are `&quot;name&quot;` and `&quot;direction&quot;`.&#10;For example&#10;&#10;    {&quot;name&quot;: &quot;stairs:stair_stonebrick&quot;, &quot;direction&quot;: &quot;-z&quot;}&#10;&#10;The possible values of `&quot;direction&quot;` are&#10;&#10;        &quot;+z&quot;  # z direction upward;&#10;        &quot;+x&quot;  # x direction upward;&#10;        &quot;-z&quot;  # z direction downward;&#10;        &quot;-x&quot;  # x direction downward;&#10;&#10;The first image shows the stairs and rail on the&#10;sloping section of the tunnel.&#10;&#10;&lt;img src=&quot;stairs_and_rail.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;The second image shows the flat part of the tunnel&#10;with rail and power rail each in pairs&#10;&#10;&lt;img src=&quot;rail_in_pairs.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;This task expects `stair_up_x` to be defined using keys `&quot;name&quot;` and `&quot;direction&quot;` .&#10;However, you can also use the Minetest&#10;Lua equivalent `&quot;name&quot;` and `&quot;param2&quot;`.&#10;&#10;        {&quot;name&quot;: &quot;stairs:stair_stonebrick&quot;, &quot;param2&quot;: &quot;2&quot;}&#10;&#10;The possible values of `&quot;param2&quot;` are:&#10;&#10;        &quot;param2&quot;: &quot;0&quot;  # same as &quot;direction&quot;: &quot;+z&quot;&#10;        &quot;param2&quot;: &quot;1&quot;  # same as &quot;direction&quot;: &quot;+x&quot;&#10;        &quot;param2&quot;: &quot;2&quot;  # same as &quot;direction&quot;: &quot;-z&quot;&#10;        &quot;param2&quot;: &quot;3&quot;  # same as &quot;direction&quot;: &quot;-x&quot;&#10;&#10;You can even use a JSON string rather than a Python `dict`.&#10;&#10;    '{&quot;name&quot;: &quot;stairs:stair_stonebrick&quot;, &quot;direction&quot;: &quot;-z&quot;}'&#10;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;See task sign in minetest for item names you will need in this task&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;stair_up_x&lt;/code&gt; needs a &lt;code&gt;dict&lt;/code&gt; specifying stonebrick stairs sloping down towards negative x&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;rail&lt;/code&gt; needs a &lt;code&gt;str&lt;/code&gt; item name for rail from the carts mod&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;power_rail&lt;/code&gt; needs a &lt;code&gt;str&lt;/code&gt; item name for power rail from the carts mod&lt;/div&gt;&#10;&lt;div class='hint'&gt;When placing rail and power rail in the flat section of the tunnel, &lt;code&gt;if&lt;/code&gt;&#10;needs a formula in terms of x which will alternate every two blocks. For example:&#10;&lt;pre&gt;&lt;code&gt;    0 0 1 1 0 0 1 1 0 0 1 1 ...&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The modulo epxression j % 2 will alternate every one block&#10;&lt;pre&gt;&lt;code&gt;    0 1 0 1 0 1 0 1 ...&lt;/code&gt;&lt;/pre&gt;&#10;So replace j with something in terms of x which counts at half speed&lt;/div&gt;&#10;&lt;div class='hint'&gt;x // 2 counts at half speed&#10;&lt;pre&gt;&lt;code&gt;    0 0 1 1 2 2 3 3 4 4 ...&lt;/code&gt;&lt;/pre&gt;&#10;&lt;div class='hint'&gt;x // 2 % 2 combines the two to get the alternating pattern&#10;&#10;&lt;p&gt;0 0 1 1 0 0 1 1 ...&lt;/p&gt;&#10;&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Stairs and rail" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="578033" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="rail_in_pairs.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="rail_in_pairs.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="stairs_and_rail.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="stairs_and_rail.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="4" />
                                      <option name="offset" value="373" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="dict" />
                                      <option name="possibleAnswer" value="{&quot;name&quot;: &quot;stairs:stair_stonebrick&quot;, &quot;direction&quot;: &quot;+x&quot;}" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="435" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="string" />
                                      <option name="possibleAnswer" value="'carts:rail'" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="461" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="string" />
                                      <option name="possibleAnswer" value="'carts:powerrail'" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="855" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="x // 2 % 2" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018 - 2019&#10;&#10;from test_helper import run_common_tests, get_answer_placeholders&#10;from triptera_pe_tests import test_building_with_pattern, mock_send_building, mock_create, test_eval, passed&#10;from unittest import mock&#10;from ircbuilder import nodebuilder&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;&#10;    # Answer 0 can be str or dict. If str then convert to dict before testing&#10;    s = eval(placeholders[0])&#10;    if isinstance(s, str):&#10;        placeholders[0] = s&#10;    s = eval(placeholders[0])&#10;    if &quot;direction&quot; in s:&#10;        if not test_eval(placeholders, 0, '{&quot;name&quot;: &quot;stairs:stair_stonebrick&quot;, &quot;direction&quot;: &quot;+x&quot;}', [{}]):&#10;            return False&#10;    else:&#10;        if not test_eval(placeholders, 0, '{&quot;name&quot;: &quot;stairs:stair_stonebrick&quot;, &quot;param2&quot;: &quot;1&quot;}'):&#10;            return False&#10;    if not test_eval(placeholders, 1, &quot;'carts:rail'&quot;, [{}]):&#10;        return False&#10;    if not test_eval(placeholders, 2, &quot;'carts:powerrail'&quot;, [{}]):&#10;        return False&#10;    if not test_eval(placeholders, 3, &quot;x//2%2&quot;, [{'x': 0}, {'x': 1}, {'x': 2}, {'x': 3}, {'x': 4}]):&#10;        return False&#10;    passed()&#10;    return True&#10;&#10;&#10;def building_pattern(player_z):&#10;    b = {}&#10;    # start point of tunnel&#10;    x1 = 69&#10;    x2 = 9&#10;    task4_x1 = 93&#10;    y1 = 14&#10;    z = player_z&#10;    num_segments = x1 - x2 + 1&#10;&#10;    # store node types in variables for easier use&#10;    ph = get_answer_placeholders()[0]&#10;    if &quot;param2&quot; in ph:&#10;        stair_up_x = {&quot;name&quot;: &quot;stairs:stair_stonebrick&quot;, &quot;param2&quot;: &quot;1&quot;}&#10;    else:&#10;        stair_up_x = {&quot;name&quot;: &quot;stairs:stair_stonebrick&quot;, &quot;direction&quot;: &quot;+x&quot;}&#10;    rail = 'carts:rail'&#10;    power_rail = 'carts:powerrail'&#10;&#10;    # sloping section of tunnel&#10;    for i in range(num_segments):&#10;        # Add stairs - Don't need stairs on very last block. Hence check i &lt; 60&#10;        if i &lt; 60:&#10;            b.update(nodebuilder.build(x1 - i, y1 - i, z - 1, stair_up_x))&#10;        # Add power rail&#10;        b.update(nodebuilder.build(x1 - i, y1 - i + 1, z, power_rail))&#10;&#10;    # flat section of tunnel&#10;    for x in range(x1, task4_x1 + 1):&#10;        # Add rail or power rail in pairs&#10;        if x // 2 % 2 == 0:&#10;            b.update(nodebuilder.build(x, y1 + 1, z, rail))&#10;        else:&#10;            b.update(nodebuilder.build(x, y1 + 1, z, power_rail))&#10;    return b&#10;&#10;&#10;def test_building():&#10;    from task import mc&#10;    return test_building_with_pattern(mc, building_pattern)&#10;&#10;&#10;@mock.patch('ircbuilder.MinetestConnection.create', mock_create)&#10;@mock.patch('ircbuilder.MinetestConnection.send_building', mock_send_building)&#10;def run_patched_tests():&#10;    run_common_tests()&#10;    test_building()&#10;&#10;&#10;if __name__ == '__main__':&#10;    if test_answer_placeholders():&#10;        run_patched_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545893889000" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="173428" />
              </Lesson>
              <Lesson>
                <option name="customPresentableName" />
                <option name="id" value="199318" />
                <option name="index" value="2" />
                <option name="name" value="Minetest 2 - Functions and Modules" />
                <option name="stepikChangeStatus" value="Up to date" />
                <option name="updateDate" value="1545917717000" />
                <option name="taskList">
                  <list>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Data types&#10;&#10;We will start off with some Python tasks which do not use Minetest.&#10;&#10;## Task&#10;&#10;Fill in the five missing code fragments in the program on the left.&#10;When you run it, pay attention to the printed output which displays in the&#10;&quot;Run&quot; pane at the bottom of this window.&#10;&#10;## Lesson&#10;&#10;This lesson looks at more detail at some variable data types we&#10;have used before. The best way to learn about data types is &#10;to experiment with them in the Python Console which can be &#10;found in the tab at the bottom of this window. Open up the Python &#10;Console by clicking on the tab. You can type the examples&#10;below directly in the console. On the right of the console&#10;is a window which shows the value of any variables you&#10;have created.&#10;&#10;For example, type `a=&quot;cat&quot;` in the console&#10;and on the right you will see `a = {str} 'cat'`&lt;/p&gt;&#10;&#10;Now type `a+=&quot;cher&quot;` and on the right you will&#10;see `a = {str} 'catcher'`&#10;&#10;## Tuples&#10;The first data type is a tuple, which is an immutable&#10;group of data surrounded by parentheses.&#10;&#10;        # Examples&#10;        t1 = (3, 4, 12)         # three integers&#10;        t2 = (&quot;three&quot;, &quot;four&quot;)  # two strings&#10;        t3 = (1.23, 45, &quot;cat&quot;)  # a decimal number, an integer and a string&#10;        t4 = (t1, (5, 6, 30))   # two tuples&#10;&#10;Immutable means that once the tuple has been created,&#10;you can't change any element in the tuple. This makes &#10;programming with tuples less prone to errors than programming with lists&#10;which are mutable. (Lists are designated by square brackets &#10;`[3, 4, 12]`).&#10;&#10;Individual elements of a tuple are accessed by index value. For example&#10;&#10;        t1[0]  # should display 3&#10;        t1[1]  # should display 4&#10;        t1[2]  # should display 12&#10;&#10;You can also assign elements to multiple variables in a single statement.&#10;&#10;        x, y, z = t3&#10;        x  # should display 1.23&#10;        y  # should display 45&#10;        z  # should display 'cat'&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Strings must be surrounded by single quotes or double quotes&lt;/div&gt;&#10;&lt;div class='hint'&gt;int is the python term for integer&lt;/div&gt;&#10;&lt;div class='hint'&gt;float is the python term for decimal number or floating point number&lt;/div&gt;&#10;&lt;div class='hint'&gt;string is the python term for text&lt;/div&gt;&#10;&lt;div class='hint'&gt;Tuple indexes are zero based so the first element has index 0&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="1" />
                      <option name="name" value="Tuples" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="578034" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="152" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="data elements" />
                                      <option name="possibleAnswer" value="&quot;In a galaxy far far away&quot;, &quot;there lived a dog&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="13" />
                                      <option name="offset" value="282" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="data elements" />
                                      <option name="possibleAnswer" value="&quot;My golf handicap&quot;, 1, 999.99" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="5" />
                                      <option name="offset" value="383" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="index" />
                                      <option name="possibleAnswer" value="1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="1" />
                                      <option name="offset" value="552" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="?" />
                                      <option name="possibleAnswer" value="5" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="701" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="equation" />
                                      <option name="possibleAnswer" value="x, y, z = t1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_string, test_exec&#10;from html import escape&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    phi = placeholders[0]&#10;    stri = &quot;Answer 1&quot;&#10;    if len(phi) &gt; 50:&#10;        failed(stri + &quot; please keep length to less than 50 characters. Your answer '&quot; + phi + &quot;' is &quot; + str(len(phi)) + &quot; characters.&quot;)&#10;        return False&#10;    answer = eval(&quot;(&quot; + phi + &quot;)&quot;, {}, {})&#10;    print(answer)&#10;    if not isinstance(answer, tuple):&#10;        failed(stri + &quot; is not a tuple. It is a &quot; + escape(str(type(answer))) + &quot;. Your answer '&quot; + phi + &quot;'&quot;)&#10;        return False&#10;    print(str(len(answer)))&#10;    if len(answer) != 2:&#10;        failed(stri + &quot; is supposed to contain 2 elements but has &quot; + str(len(answer)) + &quot;. Your answer '&quot; + phi + &quot;'&quot;)&#10;        return False&#10;    if not isinstance(answer[0],str):&#10;        failed(stri + &quot; first element is not a string. It is &quot; + repr(answer[0]) + &quot; which has type &quot; + escape(str(type(answer[0]))))&#10;        return False&#10;    print(str(type(answer[1])))&#10;    if not isinstance(answer[1],str):&#10;        failed(stri + &quot; second element is not a string. It is &quot; + repr(answer[1]) + &quot; which has type &quot; + escape(str(type(answer[1]))))&#10;        return False&#10;    phi = placeholders[1]&#10;    stri = &quot;Answer 2&quot;&#10;    if len(phi) &gt; 50:&#10;        failed(stri + &quot; please keep length to less than 50 characters. Your answer '&quot; + phi + &quot;' is &quot; + str(len(phi)) + &quot; characters.&quot;)&#10;        return False&#10;    answer = eval(&quot;(&quot; + phi + &quot;)&quot;, {}, {})&#10;    if not isinstance(answer, tuple):&#10;        failed(stri + &quot; is not a tuple. It is a &quot; + escape(str(type(answer))) + &quot;. Your answer '&quot; + phi + &quot;'&quot;)&#10;        return False&#10;    if len(answer) != 3:&#10;        failed(stri + &quot; is supposed to contain 3 elements but has &quot; + str(len(answer)) + &quot;. Your answer '&quot; + phi + &quot;'&quot;)&#10;        return False&#10;    if not isinstance(answer[0],str):&#10;        failed(stri + &quot; first element is not a string. It is &quot; + repr(answer[0]) + &quot; which has type &quot; + escape(str(type(answer[0]))))&#10;        return False&#10;    if not isinstance(answer[1],int):&#10;        failed(stri + &quot; second element is not an int. It is &quot; + repr(answer[1]) + &quot; which has type &quot; + escape(str(type(answer[1]))))&#10;        return False&#10;    if not isinstance(answer[2],float):&#10;        failed(stri + &quot; third element is not a float. It is &quot; + repr(answer[2]) + &quot; which has type &quot; + escape(str(type(answer[2]))))&#10;        return False&#10;    if not test_string(placeholders, 2, &quot;1&quot;): return False&#10;    if not test_string(placeholders, 3, &quot;5&quot;): return False&#10;    if not test_exec(placeholders, 4, &quot;x, y, z = t1&quot;,[{'t1':(15,6,1234)}]): return False&#10;    passed()&#10;    return True&#10;&#10;&#10;if __name__ == '__main__':&#10;    if test_answer_placeholders():&#10;        run_common_tests()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545879466000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Dictionaries&#10;&#10;You will now learn about the `dict` data type which is the Python&#10;name for a dictionary. `dict`s are a powerful programming tool&#10;which enable Python programs to achieve a lot in a few lines of code.&#10;This exercise also does not use Minetest, but is necessary to be able to complete the&#10;&quot;Railway station&quot; exercise.&#10;&#10;## Task&#10;&#10;Complete the nine missing code fragments in the program on the left.&#10;Pay attention to the printed output after running the program.&#10;&#10;## Lesson&#10;&#10;A dictionary is a mutable group of data elements that are accessed by keys rather than their numeric&#10;position in the dictionary. The data type is named after the book by the same name because in the book &#10;the word is the key and the meaning is the data element. You can only have one data element per key&#10;although that data element could be a complex data type such as a tuple, list or another dictionary.&#10;To create a dictionary, the keys and values are separated by colons (:) and the &quot;key:value&quot; pairs are &#10;separated by commas. Try the following examples in the console&#10;&#10;        d1={'score':25, 'another':'mine', 43:'numeric key', 'secret':&quot;don't look&quot;}  # creates dict&#10;        d1['secret']  # should display &quot;don't look&quot;&#10;        d1['another']='dog'  # assigns new value for existing key&#10;        del(d1[43])  # removes data element with key 43&#10;        del(d1['secret'])  # removes data element with key 43&#10;        d1['height']=180  # adds a new data element and key&#10;        d1  # {'score': 25, 'another': 'dog', 'height': 180}&#10;        for k,v in d1.items(): print(&quot;key=&quot;,k,&quot; value=&quot;,v)  # loops through key:value pairs&#10;        d1={}  # creates an empty dictionary&#10;        d1=dict()  # alternative method of creating empty dictionary&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Dictionaries are denoted by curly braces &lt;code&gt;{}&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;A dictionary with keys and values looks like&#10;&lt;code&gt;{'another':'mine', 'secret':&quot;don't look&quot;}&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;To assign a score of 100 to danny use the following&#10;&lt;pre&gt;&lt;code&gt;    scores['danny'] = 100&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;To add 3 to andy's score, get andy's score, add 3, and save it back in &lt;code&gt;scores&lt;/code&gt; dictionary&lt;/div&gt;&#10;&lt;div class='hint'&gt;To complete the &lt;code&gt;for&lt;/code&gt; loop, enter a function to return all the key:value pairs of data in scores&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;items()&lt;/code&gt; is the name of the function to run on the &lt;code&gt;scores&lt;/code&gt; to get all key:value pairs &lt;code&gt;scores.items()&lt;/code&gt;&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="2" />
                      <option name="name" value="Dictionaries" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="578035" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="16" />
                                      <option name="offset" value="51" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="empty dictionary" />
                                      <option name="possibleAnswer" value="dict()" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="106" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="equation" />
                                      <option name="possibleAnswer" value="scores['andy'] = 10" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="175" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="equation" />
                                      <option name="possibleAnswer" value="scores['betty'] = 15" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="245" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="equation" />
                                      <option name="possibleAnswer" value="scores['cathy'] = 12" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="291" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="equation" />
                                      <option name="possibleAnswer" value="scores['andy'] += 3" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="434" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="function" />
                                      <option name="possibleAnswer" value="scores.items()" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="486" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="score" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="7" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="513" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="score" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="8" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="8" />
                                      <option name="offset" value="536" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="variable" />
                                      <option name="possibleAnswer" value="name" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_eval, test_exec&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    if not test_eval(placeholders, 0, &quot;dict()&quot;, list_data=[{}]): return False&#10;    if not test_exec(placeholders, 1, &quot;scores['andy']=10&quot;,[{&quot;scores&quot;:{}}]): return False&#10;    if not test_exec(placeholders, 2, &quot;scores['betty']=15&quot;,[{&quot;scores&quot;:{'andy':10}}]): return False&#10;    if not test_exec(placeholders, 3, &quot;scores['cathy']=12&quot;,[{&quot;scores&quot;:{'andy':10, 'betty':15}}]): return False&#10;    if not test_exec(placeholders, 4, &quot;scores['andy']=scores['andy']+3&quot;,[{&quot;scores&quot;:{'andy':10, 'betty':15, 'cathy':12}}]): return False&#10;    if not test_eval(placeholders, 5, &quot;scores.items()&quot;, list_data=[{&quot;scores&quot;:{'andy':13, 'betty':15, 'cathy':12}}]): return False&#10;    if not test_eval(placeholders, 6, &quot;score&quot;, list_data=[{&quot;score&quot;:13}, {'score':15}, {'score':12}]): return False&#10;    if not test_eval(placeholders, 7, &quot;score&quot;, list_data=[{&quot;score&quot;:13}, {'score':15}, {'score':12}]): return False&#10;    if not test_eval(placeholders, 8, &quot;name&quot;, list_data=[{&quot;name&quot;:'andy'}, {'name':'betty'}, {'name':'cathy'}]): return False&#10;    passed()&#10;    return True&#10;&#10;&#10;if __name__ == '__main__':&#10;    if test_answer_placeholders():&#10;        run_common_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545879467000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Dictionary of Tuples&#10;&#10;Now we combine the previous two lessons to discover the usefulness of a `dict` with `tuple` keys.&#10;&#10;## Task&#10;&#10;Complete the seven missing code fragments. Run the program and study the printed output.&#10;&#10;## Lesson&#10;&#10;Because tuples are immutable, they can be used as&#10;keys in a `dict` (dictionary). This is useful when storing our `node_dict`. It means if we set a data value&#10;in a `dict` with coordinates that have already been used it will replace the previous setting.&#10;If there is no previous setting then a new &quot;key:value&quot; pair will be added to the dictionary.&#10;&#10;Try the task on the left and see if you can predict&#10;what `node_dict` will look like after each step.&#10;&#10;At the end is a `for` loop which&#10;checks different formulae for a set of data. &#10;This is a way of evaluating which is the right&#10;formula to use. For each value of `z`, write down&#10;what you think the correct integer should be&#10;and then see which formula gives the same answers.&#10;You are looking for a formula which returns the &#10;`z` value of the centre of a block given the `z` value&#10;of any part of the block.&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Enter x, y, z coordinates as three numbers in tuple to be key for dictionary where value is &quot;default:wood&quot;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Set the value of node_dict item with index of (16, 20, 10) to &quot;default:glass&quot; using&#10;&lt;pre&gt;&lt;code&gt;node_dict[(16, 20, 10)] = &quot;default:glass&quot;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;To set items within the &lt;code&gt;for z&lt;/code&gt; loop, use the same statement as before with &quot;default:stone&quot; as the material and the z coordinate in terms of the variable &lt;code&gt;z&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;See previous task description if you have forgotten how to remove a node&lt;/div&gt;&#10;&lt;div class='hint'&gt;Use built-in function &lt;code&gt;del()&lt;/code&gt; to delete an item from dict&lt;/div&gt;&#10;&lt;div class='hint'&gt;To remove node at (x, y, z) use &lt;code&gt;del(node_dict[(x, y, z)])&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;div&gt;To convert &lt;code&gt;float&lt;/code&gt; to an &lt;code&gt;int&lt;/code&gt; use a formula in terms of z from the table created by the &lt;code&gt;for i&lt;/code&gt; loop.&#10;The requirements are:&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;float&lt;/code&gt;s in the range &lt;code&gt;&amp;nbsp;9.51&lt;/code&gt; to &lt;code&gt;10.49&lt;/code&gt; will resolve to &lt;code&gt;int&lt;/code&gt; of &lt;code&gt;10&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;float&lt;/code&gt;s in the range &lt;code&gt;-1.49&lt;/code&gt; to &lt;code&gt;-0.51&lt;/code&gt; will resolve to &lt;code&gt;int&lt;/code&gt; of &lt;code&gt;-1&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;float&lt;/code&gt;s in the range &lt;code&gt;-0.49&lt;/code&gt; to &lt;code&gt;&amp;nbsp;0.49&lt;/code&gt; will resolve to &lt;code&gt;int&lt;/code&gt; of &lt;code&gt;&amp;nbsp;0&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;float&lt;/code&gt;s in the range &lt;code&gt;&amp;nbsp;0.51&lt;/code&gt; to &lt;code&gt;&amp;nbsp;1.49&lt;/code&gt; will resolve to &lt;code&gt;int&lt;/code&gt; of &lt;code&gt;&amp;nbsp;1&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="3" />
                      <option name="name" value="Dictionary of tuples" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="578036" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="172" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="15" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="176" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="20" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="180" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="10" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="277" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="node_dict[(16, 20, 10)] = &quot;default:glass&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="435" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="node_dict[(16, 20, z)] = &quot;default:stone&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="697" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="del(node_dict[(x, y, z)])" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="913" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="math.floor(z + 0.5)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_exec, test_string, test_eval&#10;import math&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    if not test_string(placeholders, 0, &quot;15&quot;):&#10;        return False&#10;    if not test_string(placeholders, 1, &quot;20&quot;):&#10;        return False&#10;    if not test_string(placeholders, 2, &quot;10&quot;):&#10;        return False&#10;    if not test_exec(placeholders, 3, &quot;node_dict[(16, 20, 10)] = 'default:glass'&quot;, [{'node_dict': {(15, 20, 10): 'default:wood'}}]):&#10;        return False&#10;    if not test_exec(placeholders, 4, &quot;node_dict[(16, 20, z)] = 'default:stone'&quot;, [&#10;            {'z': 10, 'node_dict': {(15, 20, 10): 'default:wood', (16, 20, 10): 'default:glass'}},&#10;            {'z': 11, 'node_dict': {(15, 20, 10): 'default:wood', (16, 20, 10): 'default:glass'}}]):&#10;        return False&#10;    if not test_exec(placeholders, 5, &quot;del(node_dict[(x, y, z)])&quot;, [{'x': 15, 'y': 20, 'z': 10.1, 'node_dict': {(15, 20, 10.1): 'wool:blue'}}]):&#10;        return False&#10;    if not test_eval(placeholders, 6, &quot;math.floor(z+0.5)&quot;, [{'z': -1.49}, {'z': -0.51}, {'z': -0.49}, {'z': 0.49}, {'z': 0.51}, {'z': 1.49}], modules=&quot;math&quot;):&#10;        return False&#10;    passed()&#10;    return True&#10;&#10;&#10;if __name__ == '__main__':&#10;    if test_answer_placeholders():&#10;        run_common_tests()&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545879468000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Functions&#10;&#10;When you need the same code to be used in several places, it&#10;is easier to put that code in a function and then call that function&#10;when it needs to run that code.&#10;&#10;## Task&#10;&#10;Complete the nine missing code fragments. Run the program and pay attention to the printed output.&#10;&#10;## Lesson&#10;&#10;Functions are defined used the&#10;`def` command, followed by the function name and then,&#10;in parentheses `()`, the arguments of the function.&#10;&#10;In the last task we discovered we needed to convert all&#10;coordinates to integers when adding to `node_dict`. Otherwise new nodes&#10;for the same position would not overwrite the old nodes. That will soon&#10;get tedious so we will create a function `build()` which&#10;does it for us.&#10;&#10;`build()` will return a dictionary with the new&#10;node in it. We will merge that with our existing dictionary &#10;using the `dict` `update()` function which overwrites&#10;existing data when key is the same.&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Convert &lt;code&gt;x, y, z&lt;/code&gt; in &lt;code&gt;build()&lt;/code&gt; function to the &lt;code&gt;int&lt;/code&gt; coordinates of the centre point of node using the same formula used in the last task&lt;/div&gt;&#10;&lt;div class='hint'&gt;The &lt;code&gt;build()&lt;/code&gt; as we have defined takes four parameters. They are x, y, z, and material&lt;/div&gt;&#10;&lt;div class='hint'&gt;Example: &lt;code&gt;build(16, 20, 10, &quot;default:glass&quot;)&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;In the &lt;code&gt;for z&lt;/code&gt; loop, The third parameter in the &lt;code&gt;build()&lt;/code&gt; function can be the variable &lt;code&gt;z&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Now that &lt;code&gt;build()&lt;/code&gt; converts &lt;code&gt;float&lt;/code&gt;s to &lt;code&gt;int&lt;/code&gt;s, it is fine to pass inexact&#10;floating point x, y, z coordinates directly to &lt;code&gt;build()&lt;/code&gt;.&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="4" />
                      <option name="name" value="Functions" />
                      <option name="status" value="Solved" />
                      <option name="stepId" value="578037" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="410" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="math.floor(x + 0.5)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="438" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="math.floor(y + 0.5)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="466" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="math.floor(z + 0.5)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="688" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="15" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="692" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="20" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="696" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="number" />
                                      <option name="possibleAnswer" value="10" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="6" />
                                      <option name="offset" value="700" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="string" />
                                      <option name="possibleAnswer" value="&quot;default:wood&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="7" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="815" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="arguments" />
                                      <option name="possibleAnswer" value="16, 20, 10, &quot;default:glass&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="8" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="984" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="arguments" />
                                      <option name="possibleAnswer" value="16, 20, z, &quot;default:stone&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="9" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="1173" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="arguments" />
                                      <option name="possibleAnswer" value="x, y, z, &quot;wool:blue&quot;" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_eval, test_string&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    if not test_eval(placeholders, 0, &quot;math.floor(x+0.5)&quot;, [{'x': -1.49}, {'x': -0.51}, {'x': -0.49}, {'x': 0.49}, {'x': 0.51}, {'x': 1.49}], &quot;math&quot;):&#10;        return False&#10;    if not test_eval(placeholders, 1, &quot;math.floor(y+0.5)&quot;, [{'y': -1.49}, {'y': -0.51}, {'y': -0.49}, {'y': 0.49}, {'y': 0.51}, {'y': 1.49}], &quot;math&quot;):&#10;        return False&#10;    if not test_eval(placeholders, 2, &quot;math.floor(z+0.5)&quot;, [{'z': -1.49}, {'z': -0.51}, {'z': -0.49}, {'z': 0.49}, {'z': 0.51}, {'z': 1.49}], &quot;math&quot;):&#10;        return False&#10;    if not test_string(placeholders, 3, &quot;15&quot;):&#10;        return False&#10;    if not test_string(placeholders, 4, &quot;20&quot;):&#10;        return False&#10;    if not test_string(placeholders, 5, &quot;10&quot;):&#10;        return False&#10;    if not test_eval(placeholders, 6, '&quot;default:wood&quot;'):&#10;        return False&#10;    if not test_eval(placeholders, 7, '16, 20, 10, &quot;default:glass&quot;', [{}]):&#10;        return False&#10;    if not test_eval(placeholders, 8, '16, 20, z, &quot;default:stone&quot;', [{'z':10}, {'z':11}]):&#10;        return False&#10;    if not test_eval(placeholders, 9, 'x, y, z, &quot;wool:blue&quot;', [{'x':5,'y':25,'z':10}, {'x':55,'y':255,'z':11}]):&#10;        return False&#10;    passed()&#10;    return True&#10;&#10;&#10;if __name__ == '__main__':&#10;    if test_answer_placeholders():&#10;        run_common_tests()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545896130000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="&lt;style&gt;&#10;table {border-left: 1px solid gray; border-top: 1px solid gray; border-spacing: 0px; }&#10;th, td {border-right: 1px solid gray; border-bottom: 1px solid gray}&#10;&lt;/style&gt;&#10;# Modules&#10;&#10;When we have a function that we want to call from different&#10;Python programs we put it in a module. We have already seen how modules can&#10;be imported.&#10;&#10;This task also teaches Python's conditional expressions which use a ternary operator.&#10;&#10;## Task&#10;&#10;Complete the seven missing code fragments in the program on the left.&#10;This module has only function definitions so nothing will happen when it is run.&#10;&quot;Check&quot; task will still check you have entered your answers correctly.&#10;&#10;## Lesson&#10;&#10;A module looks just like a Python program. Just like a Python program,&#10;a Python module is saved in a file&#10;which ends with &quot;.py&quot;.&#10;&#10;When a&#10;module is imported, any code not in function definitions is run.&#10;We normally don't want this so we only put function definitions &#10;in a module.&#10;&#10;The `build()` function from the previous task has been put into&#10;a module called minetest_helper.py. Now we can use it by importing&#10;it.&#10;&#10;In this task we are creating a new function `build_cuboid()` which&#10;replaces the `MinetestConnection.set_nodes()` function&#10;but saves nodes in a node dictionary to be sent more efficiently later&#10; to minetest as a batch of data.&#10;&#10;The second function we are creating, `node_lists_from_node_dict()`,&#10;converts the `node_dict` to one `node_list` per item and&#10;stores them all in another list. Each `node_list` can be used in&#10;`MinetestConnection.set_node_list()`.&#10;&#10;The third function, `send_node_lists()`,&#10; sends each `node_list` to minetest. We have&#10;to give the user of this function a facility to send some items after others.&#10;For example, when creating a tunnel, the air should be done last because&#10;we don't want lava and water flowing into tunnel during construction. Also &#10;items such as doors which take two nodes but are only specified by one node&#10;should be built after air when it is certain that no blocks exist on those &#10;nodes. (Programmer needs to have already left air space for the doors).&#10;&#10;This task.py is an example of a module that has no executable code when&#10;imported. All the code is in function definitions. &#10;When we have completed creating these functions, they will be&#10;added to the minetest_helper module for later use.&#10;&#10;## Using a `dict` of nodes&#10;&#10;When building tunnels we created a lot of glass nodes and then replaced some of&#10;them with stone, some with air and some with torches. We have to work out all&#10;the nodes that have to be set and what the final &#10;value of the node is going to be. We use the node_dict variable to&#10;store the latest node type for a set of coordinates.&#10;&#10;| Command | node_dict |&#10;|:--------|:----------|&#10;| `# initial value` | `{}` |&#10;| `set_node(2, 4, 6, glass)` | `{(2, 4, 6): &quot;default:glass&quot;}` |&#10;| `set_node(2, 5, 6, glass)` | `{(2, 4, 6): &quot;default:glass&quot;, (2, 5, 6): &quot;default:glass&quot;}` |&#10;| `set_node(2, 4, 6, stone)` | `{(2, 4, 6): &quot;default:stone&quot;, (2, 5, 6): &quot;default:glass&quot;}` |&#10;| `set_node(2, 6, 6, stone)` | `{(2, 4, 6): &quot;default:stone&quot;, (2, 5, 6): &quot;default:glass&quot;, (2, 6, 6): &quot;default:stone&quot;}` |&#10;&#10;When we convert `node_dict` to `node_lists` we get:&#10;&#10;        node_lists = {&#10;        &quot;default:glass&quot;: [(2,5,6)],&#10;        &quot;default:stone&quot;: [(2,4,6), (2,6,6)],&#10;        &quot;air&quot;:           [],&#10;        &quot;default:torch&quot;: []}&#10;&#10;which is in a good format for using `mc.set_node_list()` command.&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;Choose one form of the import statement to import the &lt;code&gt;build&lt;/code&gt; function from the &lt;code&gt;minetest_helper&lt;/code&gt; module:&#10;&lt;div&gt;&lt;code&gt;import &lt;i&gt;module&lt;/i&gt;&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;import &lt;i&gt;module.submodule&lt;/i&gt;&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;import &lt;i&gt;module&lt;/i&gt; as &lt;i&gt;alias&lt;/i&gt;&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;from &lt;i&gt;module&lt;/i&gt; import &lt;i&gt;function&lt;/i&gt;&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;from &lt;i&gt;module&lt;/i&gt; import &lt;i&gt;submodule&lt;/i&gt;&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;from &lt;i&gt;module.submodule&lt;/i&gt; import &lt;i&gt;subsubmodule&lt;/i&gt;&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;div&gt;&lt;code&gt;step_x&lt;/code&gt; is used in &lt;code&gt;range()&lt;/code&gt; function to indicate whether&#10;&lt;code&gt;x1&lt;/code&gt; is stepping up or down to get to &lt;code&gt;x2&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;step_y&lt;/code&gt; is used in &lt;code&gt;range()&lt;/code&gt; function to indicate whether&#10;&lt;code&gt;y1&lt;/code&gt; is stepping up or down to get to &lt;code&gt;y2&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;step_z&lt;/code&gt; is used in &lt;code&gt;range()&lt;/code&gt; function to indicate whether&#10;&lt;code&gt;z1&lt;/code&gt; is stepping up or down to get to &lt;code&gt;z2&lt;/code&gt;&lt;/div&gt;&#10;&lt;/div&gt;&#10;&lt;div class='hint'&gt;For &lt;code&gt;step_x, step_y, step_z&lt;/code&gt; formulae must return 1 to step up and -1 to step down&lt;/div&gt;&#10;&lt;div class='hint'&gt;For &lt;code&gt;step_x&lt;/code&gt; formulae must be in terms of &lt;code&gt;x1&lt;/code&gt; and &lt;code&gt;x2&lt;/code&gt;. Similarly for &lt;code&gt;step_y&lt;/code&gt; and &lt;code&gt;step_z&lt;/code&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Python has a ternary operator (operator which takes three values) which can be used to create a single line formula for each of &lt;code&gt;step_x, step_y, step_z&lt;/code&gt;&#10;&lt;div&gt;&lt;code&gt;d = a if b else c&lt;/code&gt;&lt;/div&gt;&#10;means&#10;&lt;div&gt;if &lt;i&gt;b&lt;/i&gt; is true then assign the value of &lt;i&gt;a&lt;/i&gt; to &lt;i&gt;d&lt;/i&gt;. Otherwise assign the value of &lt;i&gt;c&lt;/i&gt; to &lt;i&gt;d&lt;/i&gt;.&lt;/div&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;When using the ternary operator&#10;&lt;div&gt;&lt;code&gt;step_x = true_result if condition else false_result&lt;/code&gt;&lt;/div&gt;&#10;The &lt;i&gt;condition&lt;/i&gt; can be formula in terms of x1 and x2 which returns &lt;code&gt;True&lt;/code&gt; if stepping up or &lt;code&gt;False&lt;/code&gt; if stepping down.&#10;The &lt;i&gt;true_result&lt;/i&gt; can be 1 for stepping up and the &lt;i&gt;false_result&lt;/i&gt; can be -1 for stepping down.&#10;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The following statement creates a new list and stores it in the variable called my_list&#10;&lt;div&gt;&lt;code&gt;my_list = []&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;The following statement stores the variable my_list in the dictionary my_dict with key = &quot;mine&quot;&#10;&lt;div&gt;&lt;code&gt;my_dict[&quot;mine&quot;] = my_list&lt;/code&gt;&lt;/div&gt; &lt;/div&gt;&#10;&lt;div class='hint'&gt;The following statement stores a new list in dictionary my_dict with variable my_key having the value of the key&#10;&lt;div&gt;&lt;code&gt;my_dict[my_key] = []&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;In function &lt;code&gt;node_lists_from_node_dict&lt;/code&gt; select the node_list using &lt;code&gt;node_lists[str_item]&lt;/code&gt; and&#10;initialise to empty list using &lt;code&gt;= []&lt;/code&gt; or add new position to the end using &lt;code&gt;.append(pos)&lt;/code&gt;.&lt;/div&gt;&#10;&lt;div class='hint'&gt;If you have a dictionary of lists called &lt;code&gt;my_dict&lt;/code&gt;, then the list with the key equal to &lt;code&gt;&quot;default:glass&quot;&lt;/code&gt; is retrieved by&#10;&lt;div&gt;&lt;code&gt;my_dict[&quot;default:glass&quot;]&lt;/code&gt;&lt;/div&gt;&lt;/div&gt;&#10;&lt;div class='hint'&gt;Lists have a built-in function &lt;code&gt;append()&lt;/code&gt; which adds a value to the end of a list&#10;&lt;div&gt;&lt;code&gt;my_list.append((12, 34, 56))&lt;/code&gt;&lt;/div&gt;&#10;appends the &lt;code&gt;tuple (12, 34, 56)&lt;/code&gt; to the list stored in variable &lt;code&gt;my_list&lt;/code&gt;. &lt;/div&gt;&#10;&lt;div class='hint'&gt;&lt;code&gt;mc.set_node_list()&lt;/code&gt; takes two arguments. List of &lt;code&gt;(x, y, z)&lt;/code&gt; coordinates to be set to a block, and the name of the block&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="5" />
                      <option name="name" value="Modules" />
                      <option name="status" value="Unchecked" />
                      <option name="stepId" value="578038" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="70" />
                                      <option name="offset" value="0" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement to import the build function from the minetest_helper module" />
                                      <option name="possibleAnswer" value="from minetest_helper import build" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="224" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="1 if x2 &gt; x1 else -1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="258" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="1 if y2 &gt; y1 else -1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="292" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="1 if z2 &gt; z1 else -1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="966" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="node_lists[str_item] = []" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="1073" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="node_lists[str_item].append(pos)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="6" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="2199" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="item_list.append(key)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="7" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="2332" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="node_lists[item]" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_eval, test_exec&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    if not test_exec(placeholders, 0, &quot;from minetest_helper import set_node&quot;, []):&#10;        return False&#10;    if not test_eval(placeholders, 1, &quot;1 if x2 &gt; x1 else -1&quot;, [{'x1': 1, 'x2': 5}, {'x1':10, 'x2':9}]):&#10;        return False&#10;    if not test_eval(placeholders, 2, &quot;1 if y2 &gt; y1 else -1&quot;, [{'y1': 1, 'y2': 5}, {'y1':10, 'y2':9}]):&#10;        return False&#10;    if not test_eval(placeholders, 3, &quot;1 if z2 &gt; z1 else -1&quot;, [{'z1': 1, 'z2': 5}, {'z1':10, 'z2':9}]):&#10;        return False&#10;    if not test_exec(placeholders, 4, &quot;node_lists[str_item] = []&quot;, [{'node_lists': {}, 'str_item': &quot;air&quot;}, {'node_lists': {'air': [(1,2,3)]}, 'str_item':&quot;default:stone&quot;}]):&#10;        return False&#10;    if not test_exec(placeholders, 5, &quot;node_lists[str_item].append(pos)&quot;, [{'node_lists': {'air':[]}, 'str_item': &quot;air&quot;, &quot;pos&quot;: (10, 20, 30)}, {'node_lists': {'air': [(1,2,3)]}, 'str_item':&quot;air&quot;, 'pos':(2,3,4)}]):&#10;        return False&#10;    if not test_exec(placeholders, 6, &quot;item_list.append(key)&quot;, [{'item_list': ['air'], 'key': &quot;default:stone&quot;}, {'item_list': ['default:glass'], 'key': &quot;default:wood&quot;}]):&#10;        return False&#10;    if not test_eval(placeholders, 7, &quot;node_lists[item]&quot;, [{'node_lists': {'air':[(10, 20, 30)]}, 'item': &quot;air&quot; }, {'node_lists': {'air': [(1,2,3),(2,3,4)]}, 'item':&quot;air&quot;}]):&#10;        return False&#10;    passed()&#10;    return True&#10;&#10;&#10;if __name__ == '__main__':&#10;    if test_answer_placeholders():&#10;        run_common_tests()&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545955172000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Railway station&#10;&#10;We have all the helper functions to build&#10;complex structures quickly saved in the minetest_helper.py&#10;module. Now we can start building them. The first &#10;structure will be a railway station.&#10;&#10;This task also teaches string slicing, a useful tool to split up a string of text.&#10;&#10;## Task&#10;&#10;Define a function which will build a railway station. The user of this&#10;function will be able&#10;to change the appearance by setting arguments to the function&#10;such as:&#10;&#10;* location&#10;* length of platform&#10;* size of waiting room&#10;* building materials&#10;* number of storeys (levels)&#10;&#10;Make life easier for the user by providing defaults&#10;for arguments which are not set explicitly. This means the user&#10;only has to provide specifications which are different to the &#10;defaults. The only data which needs to be provided is the &#10;location of the station. The function needs to return a `dict`&#10;of all the built node data before it is&#10;sent to Minetest.&#10;&#10;## Lesson&#10;&#10;Try to follow through the function to see how the different&#10;parts of the station are built. There are comments before each&#10;section because it is not obvious from reading `build()`&#10;and `build_cuboid()` commands&#10;what is being achieved at each step.&#10;&#10;Once we are finished developing this function we will add&#10;it to minetest_helper.py module so it can be called from other &#10;functions.&#10;&#10;### Three level station&#10;&#10;&lt;img src=&quot;station_3_levels.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;### One level station&#10;&#10;&lt;img src=&quot;station_1_level.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;&lt;br&gt;&#10;&lt;div class='hint'&gt;See function documentation (between &quot;&quot;&quot; and &quot;&quot;&quot; just after function definition) for default value of room height &lt;/div&gt;&#10;&lt;div class='hint'&gt;Default room height is specified in function documentation on line 18&lt;/div&gt;&#10;&lt;div class='hint'&gt;formula in terms of door which returns the value of door without the last two characters&lt;/div&gt;&#10;&lt;div class='hint'&gt;Use the slicing notation to get a slice of a string. Test the following in Python console.&#10;&lt;div&gt;&lt;code&gt;a = 'abcdefg'&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;a[2:5]  #  'cde'&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;a[:5]  #  'abcde'&lt;/code&gt;&lt;/div&gt;&#10;&lt;div&gt;&lt;code&gt;a[:-1]  # 'abcdef'&lt;/code&gt;&lt;/div&gt;&#10;First number is the start point (inclusive, defaults to 0 if omitted). &#10;Second number is the end point (exclusive). If second number is negative it counts back from the end.&lt;/div&gt;&#10;&lt;div class='hint'&gt;To calculate the roof &lt;code&gt;layer_width&lt;/code&gt; use a formula in terms of station_width and roof_layer which returns the width of the roof at that layer&lt;/div&gt;&#10;&lt;div class='hint'&gt;When calculating &lt;code&gt;layer_width&lt;/code&gt; the bottom layer is &lt;code&gt;roof_layer = 0&lt;/code&gt; and it increases by one each layer up it goes&lt;/div&gt;&#10;&lt;div class='hint'&gt;The formula for &lt;code&gt;layer_width&lt;/code&gt; is the same as the &lt;code&gt;layer_width&lt;/code&gt; formula used earlier in the code&lt;/div&gt;&#10;&lt;br&gt;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="6" />
                      <option name="name" value="Railway station" />
                      <option name="status" value="Failed" />
                      <option name="stepId" value="578039" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="station_1_level.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="station_1_level.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="station_3_levels.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="station_3_levels.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="1905" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="platform['z']" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="2351" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="room['height'] if 'height' in room else 5" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="3068" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="materials['station_stair'] if 'station_stair' in materials else 'stairs:stair_wood'" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="4171" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="door[:-2]" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="4" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="4964" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="range(levels)" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="5" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="6375" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="station_width + 2 - 2 * roof_layer" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_eval, test_exec&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    if not test_eval(placeholders, 0, &quot;platform['z']&quot;, [{'platform':{'z':10}},{'platform':{'z':20}}]):&#10;        return False&#10;    if not test_eval(placeholders, 1, &quot;room['height'] if 'height' in room else 5&quot;, [{'room':{'height':6}},{'room':{'height':1}},{'room':{'length':20}}]):&#10;        return False&#10;    if not test_eval(placeholders, 2, &quot;materials['station_stair'] if 'station_stair' in materials else 'stairs:stair_wood'&quot;, [{'materials':{'station_stair':'stairs:stair_stonebrick'}},{'materials':{'station_stair':'stairs:stair_stone'}},{'materials':{'length':20}}]):&#10;        return False&#10;    if not test_eval(placeholders, 3, &quot;door[:-2]&quot;, [{'door':'doors:door_wood_a'},{'door':'doors:door_wood_b'},{'door':'doors:door_iron_a'}]):&#10;        return False&#10;    if not test_eval(placeholders, 4, &quot;range(levels)&quot;, [{'levels':3},{'levels':5}]):&#10;        return False&#10;    if not test_eval(placeholders, 5, &quot;station_width + 2 - 2 * roof_layer&quot;, [{'station_width':10, 'roof_layer':1},{'station_width':9, 'roof_layer':3}]):&#10;        return False&#10;    passed()&#10;&#10;&#10;if __name__ == '__main__':&#10;    if test_answer_placeholders():&#10;        run_common_tests()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545879473000" />
                    </EduTask>
                    <EduTask>
                      <option name="additionalFiles">
                        <map />
                      </option>
                      <option name="customPresentableName" />
                      <option name="descriptionFormat" value="MD" />
                      <option name="descriptionText" value="# Tunnel with stations&#10;&#10;This task puts together everything we have learnt in this&#10;course. Our tunnel code from the first lesson is put into &#10;a function. It also calls the build_station_dirx function to &#10;put a station at either end. See if you can solve the four&#10;challenges in the code and then you will have a functional &#10;tunnel builder. After this you can start creating your own &#10;functions to build structures in minetest. Thanks for &#10;completing the course.&#10;&#10;HAVE FUN!!&#10;&#10;&lt;img src=&quot;station_tunnel_interior.png&quot; width=&quot;100%&quot; /&gt;&#10;&lt;img src=&quot;station_tunnel_exterior.png&quot; width=&quot;100%&quot; /&gt;&#10;&#10;&#10;" />
                      <option name="feedbackLink">
                        <FeedbackLink>
                          <option name="link" />
                          <option name="type" value="STEPIK" />
                        </FeedbackLink>
                      </option>
                      <option name="index" value="7" />
                      <option name="name" value="Tunnel with stations" />
                      <option name="status" value="Failed" />
                      <option name="stepId" value="578040" />
                      <option name="stepikChangeStatus" value="Up to date" />
                      <option name="taskFiles">
                        <map>
                          <entry key="station_tunnel_exterior.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="station_tunnel_exterior.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="station_tunnel_interior.png">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list />
                                </option>
                                <option name="highlightErrors" value="false" />
                                <option name="name" value="station_tunnel_interior.png" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                          <entry key="task.py">
                            <value>
                              <TaskFile>
                                <option name="answerPlaceholders">
                                  <list>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="0" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="1595" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="statement" />
                                      <option name="possibleAnswer" value="xmin, y_at_xmin, xmax, y_at_xmax = x2, y2, x1, y1" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="1" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="7" />
                                      <option name="offset" value="3225" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="formula" />
                                      <option name="possibleAnswer" value="tunnel_y &gt; y_at_xmin" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="2" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="5261" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="arguments" />
                                      <option name="possibleAnswer" value="platform_at_xmax, room=room, materials=materials, levels=3" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                    <AnswerPlaceholder>
                                      <option name="hints">
                                        <list />
                                      </option>
                                      <option name="index" value="3" />
                                      <option name="initialState" />
                                      <option name="initializedFromDependency" value="false" />
                                      <option name="length" value="9" />
                                      <option name="offset" value="5648" />
                                      <option name="placeholderDependency" />
                                      <option name="placeholderText" value="arguments" />
                                      <option name="possibleAnswer" value="platform_at_xmin, room=room, materials=materials" />
                                      <option name="selected" value="false" />
                                      <option name="status" />
                                      <option name="studentAnswer" />
                                      <option name="useLength" value="false" />
                                    </AnswerPlaceholder>
                                  </list>
                                </option>
                                <option name="highlightErrors" value="true" />
                                <option name="name" value="task.py" />
                                <option name="text" value="" />
                                <option name="trackChanges" value="true" />
                                <option name="trackLengths" value="true" />
                                <option name="userCreated" value="false" />
                                <option name="visible" value="true" />
                              </TaskFile>
                            </value>
                          </entry>
                        </map>
                      </option>
                      <option name="testsText">
                        <map>
                          <entry key="tests.py" value="# © Copyright 2018 Triptera Pty Ltd&#10;# https://www.triptera.com.au&#10;# Authorised for use by schools and CoderDojo in 2018&#10;&#10;from test_helper import run_common_tests, failed, passed, get_answer_placeholders&#10;from triptera_pe_tests import test_eval, test_eval_phi, test_exec&#10;&#10;&#10;def test_answer_placeholders():&#10;    placeholders = get_answer_placeholders()&#10;    if not test_exec(placeholders, 0, &quot;xmin, y_at_xmin, xmax, y_at_xmax = x2, y2, x1, y1&quot;, [&#10;                    {'xmin':1, 'y_at_xmin':2, 'xmax':3, 'y_at_xmax':4, 'x2':50, 'y2':10, 'x1':100, 'y1':15},&#10;                    {'xmin':4, 'y_at_xmin':3, 'xmax':2, 'y_at_xmax':1, 'x2':55, 'y2':12, 'x1':150, 'y1':11}]):&#10;        return False&#10;    if not test_eval(placeholders, 1, &quot;tunnel_y &gt; y_at_xmin&quot;, [{'tunnel_y': 50, 'y_at_xmin': 40}, {'tunnel_y': 30, 'y_at_xmin': 35}]):&#10;        return False&#10;    phi = 'dict(' + placeholders[2] + &quot;)&quot;&#10;    if not test_eval_phi(phi, &quot;Answer 3&quot;, 'dict(platform_at_xmax, room=room, materials=materials, levels=3)', [&#10;        {'platform_at_xmax':{'x':1, 'levels':1}, 'room':{'length':10}, 'materials':{'stair':'wood'}, 'levels':2},&#10;        {'platform_at_xmax':{'x':3, 'levels':1}, 'room':{'length':15}, 'materials':{'stair':'wool'}, 'levels':1}&#10;    ]):&#10;        return False&#10;    phi = 'dict(' + placeholders[3] + &quot;)&quot;&#10;    if not test_eval_phi(phi, &quot;Answer 4&quot;, 'dict(platform_at_xmin, room=room, materials=materials, levels=1)', [&#10;        {'platform_at_xmin':{'x':1, 'levels':1}, 'room':{'length':10}, 'materials':{'stair':'wood'}, 'levels':2},&#10;        {'platform_at_xmin':{'x':3, 'levels':1}, 'room':{'length':15}, 'materials':{'stair':'wool'}, 'levels':1}&#10;    ]):&#10;        return False&#10;    passed()&#10;    return True&#10;&#10;&#10;if __name__ == '__main__':&#10;    if test_answer_placeholders():&#10;        run_common_tests()&#10;&#10;&#10;" />
                        </map>
                      </option>
                      <option name="updateDate" value="1545955177000" />
                    </EduTask>
                  </list>
                </option>
                <option name="unitId" value="173429" />
              </Lesson>
            </list>
          </option>
        </RemoteCourse>
      </option>
    </StudyTaskManager>
  </component>
</project>